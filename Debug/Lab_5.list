
Lab_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080041c8  080041c8  000141c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004238  08004238  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004238  08004238  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004238  08004238  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004238  08004238  00014238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800423c  0800423c  0001423c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  2000005c  0800429c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  0800429c  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d69c  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002246  00000000  00000000  0002d764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  0002f9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac2  00000000  00000000  00030780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001849a  00000000  00000000  00031242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010005  00000000  00000000  000496dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d240  00000000  00000000  000596e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e0c  00000000  00000000  000e6924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000ea730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080041b0 	.word	0x080041b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080041b0 	.word	0x080041b0

0800014c <SCH_Add_Task>:

static uint32_t newTaskId = 0;
static uint32_t count_SCH_Update = 0;
static uint32_t Get_Task_ID(void);

uint32_t SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b087      	sub	sp, #28
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	uint8_t newTaskIndex = 0;
 8000158:	2300      	movs	r3, #0
 800015a:	75fb      	strb	r3, [r7, #23]
	uint8_t sumDelay = 0; // sum of new task delay and tasks delay in the array
 800015c:	2300      	movs	r3, #0
 800015e:	75bb      	strb	r3, [r7, #22]
	uint8_t newDelay = 0; // new delay for the task
 8000160:	2300      	movs	r3, #0
 8000162:	753b      	strb	r3, [r7, #20]

	for(;newTaskIndex < SCH_MAX_TASKS;newTaskIndex++){
 8000164:	e0f5      	b.n	8000352 <SCH_Add_Task+0x206>
		sumDelay  = sumDelay + SCH_task_array[newTaskIndex].Delay;
 8000166:	7dfa      	ldrb	r2, [r7, #23]
 8000168:	49ab      	ldr	r1, [pc, #684]	; (8000418 <SCH_Add_Task+0x2cc>)
 800016a:	4613      	mov	r3, r2
 800016c:	009b      	lsls	r3, r3, #2
 800016e:	4413      	add	r3, r2
 8000170:	009b      	lsls	r3, r3, #2
 8000172:	440b      	add	r3, r1
 8000174:	3304      	adds	r3, #4
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	b2da      	uxtb	r2, r3
 800017a:	7dbb      	ldrb	r3, [r7, #22]
 800017c:	4413      	add	r3, r2
 800017e:	75bb      	strb	r3, [r7, #22]
		if(sumDelay > DELAY){
 8000180:	7dbb      	ldrb	r3, [r7, #22]
 8000182:	68ba      	ldr	r2, [r7, #8]
 8000184:	429a      	cmp	r2, r3
 8000186:	f080 80d7 	bcs.w	8000338 <SCH_Add_Task+0x1ec>
			newDelay = DELAY - (sumDelay - SCH_task_array[newTaskIndex].Delay);
 800018a:	7dfa      	ldrb	r2, [r7, #23]
 800018c:	49a2      	ldr	r1, [pc, #648]	; (8000418 <SCH_Add_Task+0x2cc>)
 800018e:	4613      	mov	r3, r2
 8000190:	009b      	lsls	r3, r3, #2
 8000192:	4413      	add	r3, r2
 8000194:	009b      	lsls	r3, r3, #2
 8000196:	440b      	add	r3, r1
 8000198:	3304      	adds	r3, #4
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	b2da      	uxtb	r2, r3
 800019e:	7dbb      	ldrb	r3, [r7, #22]
 80001a0:	1ad3      	subs	r3, r2, r3
 80001a2:	b2da      	uxtb	r2, r3
 80001a4:	68bb      	ldr	r3, [r7, #8]
 80001a6:	b2db      	uxtb	r3, r3
 80001a8:	4413      	add	r3, r2
 80001aa:	753b      	strb	r3, [r7, #20]
			// old task
			SCH_task_array[newTaskIndex].Delay = sumDelay - DELAY;
 80001ac:	7db9      	ldrb	r1, [r7, #22]
 80001ae:	7dfa      	ldrb	r2, [r7, #23]
 80001b0:	68bb      	ldr	r3, [r7, #8]
 80001b2:	1ac9      	subs	r1, r1, r3
 80001b4:	4898      	ldr	r0, [pc, #608]	; (8000418 <SCH_Add_Task+0x2cc>)
 80001b6:	4613      	mov	r3, r2
 80001b8:	009b      	lsls	r3, r3, #2
 80001ba:	4413      	add	r3, r2
 80001bc:	009b      	lsls	r3, r3, #2
 80001be:	4403      	add	r3, r0
 80001c0:	3304      	adds	r3, #4
 80001c2:	6019      	str	r1, [r3, #0]

			// shift all the remaining task to right 1 position
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex;i--){
 80001c4:	2309      	movs	r3, #9
 80001c6:	757b      	strb	r3, [r7, #21]
 80001c8:	e060      	b.n	800028c <SCH_Add_Task+0x140>
				SCH_task_array[i].pTask = SCH_task_array[i - 1].pTask;
 80001ca:	7d7b      	ldrb	r3, [r7, #21]
 80001cc:	1e59      	subs	r1, r3, #1
 80001ce:	7d7a      	ldrb	r2, [r7, #21]
 80001d0:	4891      	ldr	r0, [pc, #580]	; (8000418 <SCH_Add_Task+0x2cc>)
 80001d2:	460b      	mov	r3, r1
 80001d4:	009b      	lsls	r3, r3, #2
 80001d6:	440b      	add	r3, r1
 80001d8:	009b      	lsls	r3, r3, #2
 80001da:	4403      	add	r3, r0
 80001dc:	6819      	ldr	r1, [r3, #0]
 80001de:	488e      	ldr	r0, [pc, #568]	; (8000418 <SCH_Add_Task+0x2cc>)
 80001e0:	4613      	mov	r3, r2
 80001e2:	009b      	lsls	r3, r3, #2
 80001e4:	4413      	add	r3, r2
 80001e6:	009b      	lsls	r3, r3, #2
 80001e8:	4403      	add	r3, r0
 80001ea:	6019      	str	r1, [r3, #0]
				SCH_task_array[i].Period = SCH_task_array[i - 1].Period;
 80001ec:	7d7b      	ldrb	r3, [r7, #21]
 80001ee:	1e59      	subs	r1, r3, #1
 80001f0:	7d7a      	ldrb	r2, [r7, #21]
 80001f2:	4889      	ldr	r0, [pc, #548]	; (8000418 <SCH_Add_Task+0x2cc>)
 80001f4:	460b      	mov	r3, r1
 80001f6:	009b      	lsls	r3, r3, #2
 80001f8:	440b      	add	r3, r1
 80001fa:	009b      	lsls	r3, r3, #2
 80001fc:	4403      	add	r3, r0
 80001fe:	3308      	adds	r3, #8
 8000200:	6819      	ldr	r1, [r3, #0]
 8000202:	4885      	ldr	r0, [pc, #532]	; (8000418 <SCH_Add_Task+0x2cc>)
 8000204:	4613      	mov	r3, r2
 8000206:	009b      	lsls	r3, r3, #2
 8000208:	4413      	add	r3, r2
 800020a:	009b      	lsls	r3, r3, #2
 800020c:	4403      	add	r3, r0
 800020e:	3308      	adds	r3, #8
 8000210:	6019      	str	r1, [r3, #0]
				SCH_task_array[i].Delay = SCH_task_array[i - 1].Delay;
 8000212:	7d7b      	ldrb	r3, [r7, #21]
 8000214:	1e59      	subs	r1, r3, #1
 8000216:	7d7a      	ldrb	r2, [r7, #21]
 8000218:	487f      	ldr	r0, [pc, #508]	; (8000418 <SCH_Add_Task+0x2cc>)
 800021a:	460b      	mov	r3, r1
 800021c:	009b      	lsls	r3, r3, #2
 800021e:	440b      	add	r3, r1
 8000220:	009b      	lsls	r3, r3, #2
 8000222:	4403      	add	r3, r0
 8000224:	3304      	adds	r3, #4
 8000226:	6819      	ldr	r1, [r3, #0]
 8000228:	487b      	ldr	r0, [pc, #492]	; (8000418 <SCH_Add_Task+0x2cc>)
 800022a:	4613      	mov	r3, r2
 800022c:	009b      	lsls	r3, r3, #2
 800022e:	4413      	add	r3, r2
 8000230:	009b      	lsls	r3, r3, #2
 8000232:	4403      	add	r3, r0
 8000234:	3304      	adds	r3, #4
 8000236:	6019      	str	r1, [r3, #0]
				SCH_task_array[i].Runme = SCH_task_array[i - 1].Runme;
 8000238:	7d7b      	ldrb	r3, [r7, #21]
 800023a:	1e59      	subs	r1, r3, #1
 800023c:	7d7a      	ldrb	r2, [r7, #21]
 800023e:	4876      	ldr	r0, [pc, #472]	; (8000418 <SCH_Add_Task+0x2cc>)
 8000240:	460b      	mov	r3, r1
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	440b      	add	r3, r1
 8000246:	009b      	lsls	r3, r3, #2
 8000248:	4403      	add	r3, r0
 800024a:	330c      	adds	r3, #12
 800024c:	7818      	ldrb	r0, [r3, #0]
 800024e:	4972      	ldr	r1, [pc, #456]	; (8000418 <SCH_Add_Task+0x2cc>)
 8000250:	4613      	mov	r3, r2
 8000252:	009b      	lsls	r3, r3, #2
 8000254:	4413      	add	r3, r2
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	440b      	add	r3, r1
 800025a:	330c      	adds	r3, #12
 800025c:	4602      	mov	r2, r0
 800025e:	701a      	strb	r2, [r3, #0]
				SCH_task_array[i].TaskID = SCH_task_array[i - 1].TaskID;
 8000260:	7d7b      	ldrb	r3, [r7, #21]
 8000262:	1e59      	subs	r1, r3, #1
 8000264:	7d7a      	ldrb	r2, [r7, #21]
 8000266:	486c      	ldr	r0, [pc, #432]	; (8000418 <SCH_Add_Task+0x2cc>)
 8000268:	460b      	mov	r3, r1
 800026a:	009b      	lsls	r3, r3, #2
 800026c:	440b      	add	r3, r1
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	4403      	add	r3, r0
 8000272:	3310      	adds	r3, #16
 8000274:	6819      	ldr	r1, [r3, #0]
 8000276:	4868      	ldr	r0, [pc, #416]	; (8000418 <SCH_Add_Task+0x2cc>)
 8000278:	4613      	mov	r3, r2
 800027a:	009b      	lsls	r3, r3, #2
 800027c:	4413      	add	r3, r2
 800027e:	009b      	lsls	r3, r3, #2
 8000280:	4403      	add	r3, r0
 8000282:	3310      	adds	r3, #16
 8000284:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex;i--){
 8000286:	7d7b      	ldrb	r3, [r7, #21]
 8000288:	3b01      	subs	r3, #1
 800028a:	757b      	strb	r3, [r7, #21]
 800028c:	7d7a      	ldrb	r2, [r7, #21]
 800028e:	7dfb      	ldrb	r3, [r7, #23]
 8000290:	429a      	cmp	r2, r3
 8000292:	d89a      	bhi.n	80001ca <SCH_Add_Task+0x7e>
			}
			// Add new task at newIndex position
			SCH_task_array[newTaskIndex].pTask = pFunction;
 8000294:	7dfa      	ldrb	r2, [r7, #23]
 8000296:	4960      	ldr	r1, [pc, #384]	; (8000418 <SCH_Add_Task+0x2cc>)
 8000298:	4613      	mov	r3, r2
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	4413      	add	r3, r2
 800029e:	009b      	lsls	r3, r3, #2
 80002a0:	440b      	add	r3, r1
 80002a2:	68fa      	ldr	r2, [r7, #12]
 80002a4:	601a      	str	r2, [r3, #0]
			SCH_task_array[newTaskIndex].Delay = newDelay;
 80002a6:	7dfa      	ldrb	r2, [r7, #23]
 80002a8:	7d39      	ldrb	r1, [r7, #20]
 80002aa:	485b      	ldr	r0, [pc, #364]	; (8000418 <SCH_Add_Task+0x2cc>)
 80002ac:	4613      	mov	r3, r2
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	4413      	add	r3, r2
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	4403      	add	r3, r0
 80002b6:	3304      	adds	r3, #4
 80002b8:	6019      	str	r1, [r3, #0]
			SCH_task_array[newTaskIndex].Period = PERIOD;
 80002ba:	7dfa      	ldrb	r2, [r7, #23]
 80002bc:	4956      	ldr	r1, [pc, #344]	; (8000418 <SCH_Add_Task+0x2cc>)
 80002be:	4613      	mov	r3, r2
 80002c0:	009b      	lsls	r3, r3, #2
 80002c2:	4413      	add	r3, r2
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	440b      	add	r3, r1
 80002c8:	3308      	adds	r3, #8
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	601a      	str	r2, [r3, #0]
			SCH_task_array[newTaskIndex].Runme = 0;
 80002ce:	7dfa      	ldrb	r2, [r7, #23]
 80002d0:	4951      	ldr	r1, [pc, #324]	; (8000418 <SCH_Add_Task+0x2cc>)
 80002d2:	4613      	mov	r3, r2
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	4413      	add	r3, r2
 80002d8:	009b      	lsls	r3, r3, #2
 80002da:	440b      	add	r3, r1
 80002dc:	330c      	adds	r3, #12
 80002de:	2200      	movs	r2, #0
 80002e0:	701a      	strb	r2, [r3, #0]
			if(SCH_task_array[newTaskIndex].Delay == 0){
 80002e2:	7dfa      	ldrb	r2, [r7, #23]
 80002e4:	494c      	ldr	r1, [pc, #304]	; (8000418 <SCH_Add_Task+0x2cc>)
 80002e6:	4613      	mov	r3, r2
 80002e8:	009b      	lsls	r3, r3, #2
 80002ea:	4413      	add	r3, r2
 80002ec:	009b      	lsls	r3, r3, #2
 80002ee:	440b      	add	r3, r1
 80002f0:	3304      	adds	r3, #4
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d109      	bne.n	800030c <SCH_Add_Task+0x1c0>
				SCH_task_array[newTaskIndex].Runme = 1;
 80002f8:	7dfa      	ldrb	r2, [r7, #23]
 80002fa:	4947      	ldr	r1, [pc, #284]	; (8000418 <SCH_Add_Task+0x2cc>)
 80002fc:	4613      	mov	r3, r2
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	4413      	add	r3, r2
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	440b      	add	r3, r1
 8000306:	330c      	adds	r3, #12
 8000308:	2201      	movs	r2, #1
 800030a:	701a      	strb	r2, [r3, #0]
			}
			SCH_task_array[newTaskIndex].TaskID = Get_Task_ID();
 800030c:	7dfc      	ldrb	r4, [r7, #23]
 800030e:	f000 f9d5 	bl	80006bc <Get_Task_ID>
 8000312:	4602      	mov	r2, r0
 8000314:	4940      	ldr	r1, [pc, #256]	; (8000418 <SCH_Add_Task+0x2cc>)
 8000316:	4623      	mov	r3, r4
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	4423      	add	r3, r4
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	440b      	add	r3, r1
 8000320:	3310      	adds	r3, #16
 8000322:	601a      	str	r2, [r3, #0]
			return SCH_task_array[newTaskIndex].TaskID;
 8000324:	7dfa      	ldrb	r2, [r7, #23]
 8000326:	493c      	ldr	r1, [pc, #240]	; (8000418 <SCH_Add_Task+0x2cc>)
 8000328:	4613      	mov	r3, r2
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	4413      	add	r3, r2
 800032e:	009b      	lsls	r3, r3, #2
 8000330:	440b      	add	r3, r1
 8000332:	3310      	adds	r3, #16
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	e06b      	b.n	8000410 <SCH_Add_Task+0x2c4>
		}
		// if get to the last then break
		if(SCH_task_array[newTaskIndex].pTask == 0x0000) break;
 8000338:	7dfa      	ldrb	r2, [r7, #23]
 800033a:	4937      	ldr	r1, [pc, #220]	; (8000418 <SCH_Add_Task+0x2cc>)
 800033c:	4613      	mov	r3, r2
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	4413      	add	r3, r2
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	440b      	add	r3, r1
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d007      	beq.n	800035c <SCH_Add_Task+0x210>
	for(;newTaskIndex < SCH_MAX_TASKS;newTaskIndex++){
 800034c:	7dfb      	ldrb	r3, [r7, #23]
 800034e:	3301      	adds	r3, #1
 8000350:	75fb      	strb	r3, [r7, #23]
 8000352:	7dfb      	ldrb	r3, [r7, #23]
 8000354:	2b09      	cmp	r3, #9
 8000356:	f67f af06 	bls.w	8000166 <SCH_Add_Task+0x1a>
 800035a:	e000      	b.n	800035e <SCH_Add_Task+0x212>
		if(SCH_task_array[newTaskIndex].pTask == 0x0000) break;
 800035c:	bf00      	nop
	}
	// Add new task at newIndex position
	if(newTaskIndex >= SCH_MAX_TASKS) {
 800035e:	7dfb      	ldrb	r3, [r7, #23]
 8000360:	2b09      	cmp	r3, #9
 8000362:	d902      	bls.n	800036a <SCH_Add_Task+0x21e>
		return -1;
 8000364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000368:	e052      	b.n	8000410 <SCH_Add_Task+0x2c4>
	}
	SCH_task_array[newTaskIndex].pTask = pFunction;
 800036a:	7dfa      	ldrb	r2, [r7, #23]
 800036c:	492a      	ldr	r1, [pc, #168]	; (8000418 <SCH_Add_Task+0x2cc>)
 800036e:	4613      	mov	r3, r2
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	4413      	add	r3, r2
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	440b      	add	r3, r1
 8000378:	68fa      	ldr	r2, [r7, #12]
 800037a:	601a      	str	r2, [r3, #0]
	SCH_task_array[newTaskIndex].Delay = DELAY - sumDelay;
 800037c:	7dbb      	ldrb	r3, [r7, #22]
 800037e:	7dfa      	ldrb	r2, [r7, #23]
 8000380:	68b9      	ldr	r1, [r7, #8]
 8000382:	1ac9      	subs	r1, r1, r3
 8000384:	4824      	ldr	r0, [pc, #144]	; (8000418 <SCH_Add_Task+0x2cc>)
 8000386:	4613      	mov	r3, r2
 8000388:	009b      	lsls	r3, r3, #2
 800038a:	4413      	add	r3, r2
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	4403      	add	r3, r0
 8000390:	3304      	adds	r3, #4
 8000392:	6019      	str	r1, [r3, #0]
	SCH_task_array[newTaskIndex].Period = PERIOD;
 8000394:	7dfa      	ldrb	r2, [r7, #23]
 8000396:	4920      	ldr	r1, [pc, #128]	; (8000418 <SCH_Add_Task+0x2cc>)
 8000398:	4613      	mov	r3, r2
 800039a:	009b      	lsls	r3, r3, #2
 800039c:	4413      	add	r3, r2
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	440b      	add	r3, r1
 80003a2:	3308      	adds	r3, #8
 80003a4:	687a      	ldr	r2, [r7, #4]
 80003a6:	601a      	str	r2, [r3, #0]
	SCH_task_array[newTaskIndex].Runme = 0;
 80003a8:	7dfa      	ldrb	r2, [r7, #23]
 80003aa:	491b      	ldr	r1, [pc, #108]	; (8000418 <SCH_Add_Task+0x2cc>)
 80003ac:	4613      	mov	r3, r2
 80003ae:	009b      	lsls	r3, r3, #2
 80003b0:	4413      	add	r3, r2
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	440b      	add	r3, r1
 80003b6:	330c      	adds	r3, #12
 80003b8:	2200      	movs	r2, #0
 80003ba:	701a      	strb	r2, [r3, #0]
	if(SCH_task_array[newTaskIndex].Delay == 0){
 80003bc:	7dfa      	ldrb	r2, [r7, #23]
 80003be:	4916      	ldr	r1, [pc, #88]	; (8000418 <SCH_Add_Task+0x2cc>)
 80003c0:	4613      	mov	r3, r2
 80003c2:	009b      	lsls	r3, r3, #2
 80003c4:	4413      	add	r3, r2
 80003c6:	009b      	lsls	r3, r3, #2
 80003c8:	440b      	add	r3, r1
 80003ca:	3304      	adds	r3, #4
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d109      	bne.n	80003e6 <SCH_Add_Task+0x29a>
		SCH_task_array[newTaskIndex].Runme = 1;
 80003d2:	7dfa      	ldrb	r2, [r7, #23]
 80003d4:	4910      	ldr	r1, [pc, #64]	; (8000418 <SCH_Add_Task+0x2cc>)
 80003d6:	4613      	mov	r3, r2
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	4413      	add	r3, r2
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	440b      	add	r3, r1
 80003e0:	330c      	adds	r3, #12
 80003e2:	2201      	movs	r2, #1
 80003e4:	701a      	strb	r2, [r3, #0]
	}
	SCH_task_array[newTaskIndex].TaskID = Get_Task_ID();
 80003e6:	7dfc      	ldrb	r4, [r7, #23]
 80003e8:	f000 f968 	bl	80006bc <Get_Task_ID>
 80003ec:	4602      	mov	r2, r0
 80003ee:	490a      	ldr	r1, [pc, #40]	; (8000418 <SCH_Add_Task+0x2cc>)
 80003f0:	4623      	mov	r3, r4
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	4423      	add	r3, r4
 80003f6:	009b      	lsls	r3, r3, #2
 80003f8:	440b      	add	r3, r1
 80003fa:	3310      	adds	r3, #16
 80003fc:	601a      	str	r2, [r3, #0]
	return SCH_task_array[newTaskIndex].TaskID;
 80003fe:	7dfa      	ldrb	r2, [r7, #23]
 8000400:	4905      	ldr	r1, [pc, #20]	; (8000418 <SCH_Add_Task+0x2cc>)
 8000402:	4613      	mov	r3, r2
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	4413      	add	r3, r2
 8000408:	009b      	lsls	r3, r3, #2
 800040a:	440b      	add	r3, r1
 800040c:	3310      	adds	r3, #16
 800040e:	681b      	ldr	r3, [r3, #0]
}
 8000410:	4618      	mov	r0, r3
 8000412:	371c      	adds	r7, #28
 8000414:	46bd      	mov	sp, r7
 8000416:	bd90      	pop	{r4, r7, pc}
 8000418:	20000078 	.word	0x20000078

0800041c <SCH_Update>:
void SCH_Update(){
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
	count_SCH_Update++;
 8000420:	4b10      	ldr	r3, [pc, #64]	; (8000464 <SCH_Update+0x48>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	3301      	adds	r3, #1
 8000426:	4a0f      	ldr	r2, [pc, #60]	; (8000464 <SCH_Update+0x48>)
 8000428:	6013      	str	r3, [r2, #0]
	if(SCH_task_array[0].pTask != 0x0000 && SCH_task_array[0].Runme == 0 ){
 800042a:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <SCH_Update+0x4c>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d013      	beq.n	800045a <SCH_Update+0x3e>
 8000432:	4b0d      	ldr	r3, [pc, #52]	; (8000468 <SCH_Update+0x4c>)
 8000434:	7b1b      	ldrb	r3, [r3, #12]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d10f      	bne.n	800045a <SCH_Update+0x3e>
		if(SCH_task_array[0].Delay > 0){
 800043a:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <SCH_Update+0x4c>)
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d004      	beq.n	800044c <SCH_Update+0x30>
			SCH_task_array[0].Delay = SCH_task_array[0].Delay - 1;
 8000442:	4b09      	ldr	r3, [pc, #36]	; (8000468 <SCH_Update+0x4c>)
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	3b01      	subs	r3, #1
 8000448:	4a07      	ldr	r2, [pc, #28]	; (8000468 <SCH_Update+0x4c>)
 800044a:	6053      	str	r3, [r2, #4]
		}
		if(SCH_task_array[0].Delay == 0) SCH_task_array[0].Runme = 1;
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <SCH_Update+0x4c>)
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d102      	bne.n	800045a <SCH_Update+0x3e>
 8000454:	4b04      	ldr	r3, [pc, #16]	; (8000468 <SCH_Update+0x4c>)
 8000456:	2201      	movs	r2, #1
 8000458:	731a      	strb	r2, [r3, #12]
	}
}
 800045a:	bf00      	nop
 800045c:	46bd      	mov	sp, r7
 800045e:	bc80      	pop	{r7}
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	20000144 	.word	0x20000144
 8000468:	20000078 	.word	0x20000078

0800046c <SCH_Delete_Task>:
uint8_t SCH_Delete_Task(uint32_t taskID){
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	uint8_t Return_code = 0;
 8000474:	2300      	movs	r3, #0
 8000476:	73fb      	strb	r3, [r7, #15]
	uint8_t taskIndex = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	73bb      	strb	r3, [r7, #14]
	uint8_t j;
	if(taskID != NO_TASK_ID){
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	2b00      	cmp	r3, #0
 8000480:	f000 80e1 	beq.w	8000646 <SCH_Delete_Task+0x1da>
		for(taskIndex = 0; taskIndex< SCH_MAX_TASKS;taskIndex++){
 8000484:	2300      	movs	r3, #0
 8000486:	73bb      	strb	r3, [r7, #14]
 8000488:	e0d9      	b.n	800063e <SCH_Delete_Task+0x1d2>
			if(taskID == SCH_task_array[taskIndex].TaskID){
 800048a:	7bba      	ldrb	r2, [r7, #14]
 800048c:	4971      	ldr	r1, [pc, #452]	; (8000654 <SCH_Delete_Task+0x1e8>)
 800048e:	4613      	mov	r3, r2
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	4413      	add	r3, r2
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	440b      	add	r3, r1
 8000498:	3310      	adds	r3, #16
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	429a      	cmp	r2, r3
 80004a0:	f040 80ca 	bne.w	8000638 <SCH_Delete_Task+0x1cc>
				Return_code = 1;
 80004a4:	2301      	movs	r3, #1
 80004a6:	73fb      	strb	r3, [r7, #15]
				if(taskIndex != 0 && taskIndex < SCH_MAX_TASKS - 1){
 80004a8:	7bbb      	ldrb	r3, [r7, #14]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d02b      	beq.n	8000506 <SCH_Delete_Task+0x9a>
 80004ae:	7bbb      	ldrb	r3, [r7, #14]
 80004b0:	2b08      	cmp	r3, #8
 80004b2:	d828      	bhi.n	8000506 <SCH_Delete_Task+0x9a>
					if(SCH_task_array[taskIndex + 1].pTask != 0x0000){
 80004b4:	7bbb      	ldrb	r3, [r7, #14]
 80004b6:	1c5a      	adds	r2, r3, #1
 80004b8:	4966      	ldr	r1, [pc, #408]	; (8000654 <SCH_Delete_Task+0x1e8>)
 80004ba:	4613      	mov	r3, r2
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	4413      	add	r3, r2
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	440b      	add	r3, r1
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d01d      	beq.n	8000506 <SCH_Delete_Task+0x9a>
						SCH_task_array[taskIndex+1].Delay += SCH_task_array[taskIndex].Delay;
 80004ca:	7bbb      	ldrb	r3, [r7, #14]
 80004cc:	1c5a      	adds	r2, r3, #1
 80004ce:	4961      	ldr	r1, [pc, #388]	; (8000654 <SCH_Delete_Task+0x1e8>)
 80004d0:	4613      	mov	r3, r2
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	4413      	add	r3, r2
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	440b      	add	r3, r1
 80004da:	3304      	adds	r3, #4
 80004dc:	6819      	ldr	r1, [r3, #0]
 80004de:	7bba      	ldrb	r2, [r7, #14]
 80004e0:	485c      	ldr	r0, [pc, #368]	; (8000654 <SCH_Delete_Task+0x1e8>)
 80004e2:	4613      	mov	r3, r2
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	4413      	add	r3, r2
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	4403      	add	r3, r0
 80004ec:	3304      	adds	r3, #4
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	7bba      	ldrb	r2, [r7, #14]
 80004f2:	3201      	adds	r2, #1
 80004f4:	4419      	add	r1, r3
 80004f6:	4857      	ldr	r0, [pc, #348]	; (8000654 <SCH_Delete_Task+0x1e8>)
 80004f8:	4613      	mov	r3, r2
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	4413      	add	r3, r2
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	4403      	add	r3, r0
 8000502:	3304      	adds	r3, #4
 8000504:	6019      	str	r1, [r3, #0]
					}
				}
				// shift all the remain to left 1 position
				for(j = taskIndex; j< SCH_MAX_TASKS - 1;j++){
 8000506:	7bbb      	ldrb	r3, [r7, #14]
 8000508:	737b      	strb	r3, [r7, #13]
 800050a:	e060      	b.n	80005ce <SCH_Delete_Task+0x162>
					SCH_task_array[j].pTask = SCH_task_array[j+1].pTask;
 800050c:	7b7b      	ldrb	r3, [r7, #13]
 800050e:	1c59      	adds	r1, r3, #1
 8000510:	7b7a      	ldrb	r2, [r7, #13]
 8000512:	4850      	ldr	r0, [pc, #320]	; (8000654 <SCH_Delete_Task+0x1e8>)
 8000514:	460b      	mov	r3, r1
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	440b      	add	r3, r1
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	4403      	add	r3, r0
 800051e:	6819      	ldr	r1, [r3, #0]
 8000520:	484c      	ldr	r0, [pc, #304]	; (8000654 <SCH_Delete_Task+0x1e8>)
 8000522:	4613      	mov	r3, r2
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	4413      	add	r3, r2
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	4403      	add	r3, r0
 800052c:	6019      	str	r1, [r3, #0]
					SCH_task_array[j].Period = SCH_task_array[j+1].Period;
 800052e:	7b7b      	ldrb	r3, [r7, #13]
 8000530:	1c59      	adds	r1, r3, #1
 8000532:	7b7a      	ldrb	r2, [r7, #13]
 8000534:	4847      	ldr	r0, [pc, #284]	; (8000654 <SCH_Delete_Task+0x1e8>)
 8000536:	460b      	mov	r3, r1
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	440b      	add	r3, r1
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	4403      	add	r3, r0
 8000540:	3308      	adds	r3, #8
 8000542:	6819      	ldr	r1, [r3, #0]
 8000544:	4843      	ldr	r0, [pc, #268]	; (8000654 <SCH_Delete_Task+0x1e8>)
 8000546:	4613      	mov	r3, r2
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	4413      	add	r3, r2
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	4403      	add	r3, r0
 8000550:	3308      	adds	r3, #8
 8000552:	6019      	str	r1, [r3, #0]
					SCH_task_array[j].Delay = SCH_task_array[j+1].Delay;
 8000554:	7b7b      	ldrb	r3, [r7, #13]
 8000556:	1c59      	adds	r1, r3, #1
 8000558:	7b7a      	ldrb	r2, [r7, #13]
 800055a:	483e      	ldr	r0, [pc, #248]	; (8000654 <SCH_Delete_Task+0x1e8>)
 800055c:	460b      	mov	r3, r1
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	440b      	add	r3, r1
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	4403      	add	r3, r0
 8000566:	3304      	adds	r3, #4
 8000568:	6819      	ldr	r1, [r3, #0]
 800056a:	483a      	ldr	r0, [pc, #232]	; (8000654 <SCH_Delete_Task+0x1e8>)
 800056c:	4613      	mov	r3, r2
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	4413      	add	r3, r2
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	4403      	add	r3, r0
 8000576:	3304      	adds	r3, #4
 8000578:	6019      	str	r1, [r3, #0]
					SCH_task_array[j].Runme = SCH_task_array[j+1].Runme;
 800057a:	7b7b      	ldrb	r3, [r7, #13]
 800057c:	1c59      	adds	r1, r3, #1
 800057e:	7b7a      	ldrb	r2, [r7, #13]
 8000580:	4834      	ldr	r0, [pc, #208]	; (8000654 <SCH_Delete_Task+0x1e8>)
 8000582:	460b      	mov	r3, r1
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	440b      	add	r3, r1
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	4403      	add	r3, r0
 800058c:	330c      	adds	r3, #12
 800058e:	7818      	ldrb	r0, [r3, #0]
 8000590:	4930      	ldr	r1, [pc, #192]	; (8000654 <SCH_Delete_Task+0x1e8>)
 8000592:	4613      	mov	r3, r2
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	4413      	add	r3, r2
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	440b      	add	r3, r1
 800059c:	330c      	adds	r3, #12
 800059e:	4602      	mov	r2, r0
 80005a0:	701a      	strb	r2, [r3, #0]
					SCH_task_array[j].TaskID = SCH_task_array[j+1].TaskID;
 80005a2:	7b7b      	ldrb	r3, [r7, #13]
 80005a4:	1c59      	adds	r1, r3, #1
 80005a6:	7b7a      	ldrb	r2, [r7, #13]
 80005a8:	482a      	ldr	r0, [pc, #168]	; (8000654 <SCH_Delete_Task+0x1e8>)
 80005aa:	460b      	mov	r3, r1
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	440b      	add	r3, r1
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	4403      	add	r3, r0
 80005b4:	3310      	adds	r3, #16
 80005b6:	6819      	ldr	r1, [r3, #0]
 80005b8:	4826      	ldr	r0, [pc, #152]	; (8000654 <SCH_Delete_Task+0x1e8>)
 80005ba:	4613      	mov	r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	4403      	add	r3, r0
 80005c4:	3310      	adds	r3, #16
 80005c6:	6019      	str	r1, [r3, #0]
				for(j = taskIndex; j< SCH_MAX_TASKS - 1;j++){
 80005c8:	7b7b      	ldrb	r3, [r7, #13]
 80005ca:	3301      	adds	r3, #1
 80005cc:	737b      	strb	r3, [r7, #13]
 80005ce:	7b7b      	ldrb	r3, [r7, #13]
 80005d0:	2b08      	cmp	r3, #8
 80005d2:	d99b      	bls.n	800050c <SCH_Delete_Task+0xa0>
				}
				// delete the task
				SCH_task_array[j].pTask = 0x0000;
 80005d4:	7b7a      	ldrb	r2, [r7, #13]
 80005d6:	491f      	ldr	r1, [pc, #124]	; (8000654 <SCH_Delete_Task+0x1e8>)
 80005d8:	4613      	mov	r3, r2
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	4413      	add	r3, r2
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	440b      	add	r3, r1
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
				SCH_task_array[j].Period = 0;
 80005e6:	7b7a      	ldrb	r2, [r7, #13]
 80005e8:	491a      	ldr	r1, [pc, #104]	; (8000654 <SCH_Delete_Task+0x1e8>)
 80005ea:	4613      	mov	r3, r2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	4413      	add	r3, r2
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	440b      	add	r3, r1
 80005f4:	3308      	adds	r3, #8
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
				SCH_task_array[j].Delay = 0;
 80005fa:	7b7a      	ldrb	r2, [r7, #13]
 80005fc:	4915      	ldr	r1, [pc, #84]	; (8000654 <SCH_Delete_Task+0x1e8>)
 80005fe:	4613      	mov	r3, r2
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4413      	add	r3, r2
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	440b      	add	r3, r1
 8000608:	3304      	adds	r3, #4
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
				SCH_task_array[j].Runme = 0;
 800060e:	7b7a      	ldrb	r2, [r7, #13]
 8000610:	4910      	ldr	r1, [pc, #64]	; (8000654 <SCH_Delete_Task+0x1e8>)
 8000612:	4613      	mov	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	4413      	add	r3, r2
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	440b      	add	r3, r1
 800061c:	330c      	adds	r3, #12
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
				SCH_task_array[j].TaskID = 0;
 8000622:	7b7a      	ldrb	r2, [r7, #13]
 8000624:	490b      	ldr	r1, [pc, #44]	; (8000654 <SCH_Delete_Task+0x1e8>)
 8000626:	4613      	mov	r3, r2
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	4413      	add	r3, r2
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	440b      	add	r3, r1
 8000630:	3310      	adds	r3, #16
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
				break;
 8000636:	e006      	b.n	8000646 <SCH_Delete_Task+0x1da>
		for(taskIndex = 0; taskIndex< SCH_MAX_TASKS;taskIndex++){
 8000638:	7bbb      	ldrb	r3, [r7, #14]
 800063a:	3301      	adds	r3, #1
 800063c:	73bb      	strb	r3, [r7, #14]
 800063e:	7bbb      	ldrb	r3, [r7, #14]
 8000640:	2b09      	cmp	r3, #9
 8000642:	f67f af22 	bls.w	800048a <SCH_Delete_Task+0x1e>

			}
		}
	}
	return Return_code;
 8000646:	7bfb      	ldrb	r3, [r7, #15]
}
 8000648:	4618      	mov	r0, r3
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000078 	.word	0x20000078

08000658 <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void){
 8000658:	b5b0      	push	{r4, r5, r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
	if(SCH_task_array[0].Runme > 0){
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <SCH_Dispatch_Tasks+0x60>)
 8000660:	7b1b      	ldrb	r3, [r3, #12]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d023      	beq.n	80006ae <SCH_Dispatch_Tasks+0x56>
		debugPrintout(SCH_task_array[0].Period,SCH_task_array[0].TaskID);
 8000666:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <SCH_Dispatch_Tasks+0x60>)
 8000668:	689b      	ldr	r3, [r3, #8]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <SCH_Dispatch_Tasks+0x60>)
 800066e:	6912      	ldr	r2, [r2, #16]
 8000670:	b2d2      	uxtb	r2, r2
 8000672:	4611      	mov	r1, r2
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fa21 	bl	8000abc <debugPrintout>
		(*SCH_task_array[0].pTask)();
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <SCH_Dispatch_Tasks+0x60>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4798      	blx	r3
		SCH_task_array[0].Runme = 0;
 8000680:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <SCH_Dispatch_Tasks+0x60>)
 8000682:	2200      	movs	r2, #0
 8000684:	731a      	strb	r2, [r3, #12]
		sTask temTask = SCH_task_array[0];
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <SCH_Dispatch_Tasks+0x60>)
 8000688:	1d3c      	adds	r4, r7, #4
 800068a:	461d      	mov	r5, r3
 800068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000690:	682b      	ldr	r3, [r5, #0]
 8000692:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(temTask.TaskID);
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff fee8 	bl	800046c <SCH_Delete_Task>
		if(temTask.Period != 0){
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d005      	beq.n	80006ae <SCH_Dispatch_Tasks+0x56>
			SCH_Add_Task(temTask.pTask, temTask.Period, temTask.Period);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	68f9      	ldr	r1, [r7, #12]
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff fd4f 	bl	800014c <SCH_Add_Task>
		}
	}
}
 80006ae:	bf00      	nop
 80006b0:	3718      	adds	r7, #24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bdb0      	pop	{r4, r5, r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000078 	.word	0x20000078

080006bc <Get_Task_ID>:
static uint32_t Get_Task_ID(){
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
	newTaskId++;
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <Get_Task_ID+0x1c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	3301      	adds	r3, #1
 80006c6:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <Get_Task_ID+0x1c>)
 80006c8:	6013      	str	r3, [r2, #0]
//	if(newTaskId == NO_TASK_ID) newTaskId++;
	return newTaskId;
 80006ca:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <Get_Task_ID+0x1c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000140 	.word	0x20000140

080006dc <SCH_Init>:

void SCH_Init(){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
	unsigned char i ;
	for(i = 0; i< SCH_MAX_TASKS;i++){
 80006e2:	2300      	movs	r3, #0
 80006e4:	71fb      	strb	r3, [r7, #7]
 80006e6:	e006      	b.n	80006f6 <SCH_Init+0x1a>
		SCH_Delete_Task(i);
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff febe 	bl	800046c <SCH_Delete_Task>
	for(i = 0; i< SCH_MAX_TASKS;i++){
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	3301      	adds	r3, #1
 80006f4:	71fb      	strb	r3, [r7, #7]
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2b09      	cmp	r3, #9
 80006fa:	d9f5      	bls.n	80006e8 <SCH_Init+0xc>
	}
}
 80006fc:	bf00      	nop
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <initTask>:
 *  Created on: Nov 24, 2023
 *      Author: phongtran
 */
#include "Task_Container.h"

void initTask(){
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 800070c:	2201      	movs	r2, #1
 800070e:	2101      	movs	r1, #1
 8000710:	480c      	ldr	r0, [pc, #48]	; (8000744 <initTask+0x3c>)
 8000712:	f001 f943 	bl	800199c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000716:	2201      	movs	r2, #1
 8000718:	2102      	movs	r1, #2
 800071a:	480a      	ldr	r0, [pc, #40]	; (8000744 <initTask+0x3c>)
 800071c:	f001 f93e 	bl	800199c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8000720:	2201      	movs	r2, #1
 8000722:	2104      	movs	r1, #4
 8000724:	4807      	ldr	r0, [pc, #28]	; (8000744 <initTask+0x3c>)
 8000726:	f001 f939 	bl	800199c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 800072a:	2201      	movs	r2, #1
 800072c:	2108      	movs	r1, #8
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <initTask+0x3c>)
 8000730:	f001 f934 	bl	800199c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1);
 8000734:	2201      	movs	r2, #1
 8000736:	2110      	movs	r1, #16
 8000738:	4802      	ldr	r0, [pc, #8]	; (8000744 <initTask+0x3c>)
 800073a:	f001 f92f 	bl	800199c <HAL_GPIO_WritePin>
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40010c00 	.word	0x40010c00

08000748 <LED_Blink_500ms>:
void LED_Blink_500ms(){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800074c:	2101      	movs	r1, #1
 800074e:	4802      	ldr	r0, [pc, #8]	; (8000758 <LED_Blink_500ms+0x10>)
 8000750:	f001 f93c 	bl	80019cc <HAL_GPIO_TogglePin>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40010c00 	.word	0x40010c00

0800075c <LED_Blink_1000ms>:
void LED_Blink_1000ms(){
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000760:	2102      	movs	r1, #2
 8000762:	4802      	ldr	r0, [pc, #8]	; (800076c <LED_Blink_1000ms+0x10>)
 8000764:	f001 f932 	bl	80019cc <HAL_GPIO_TogglePin>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40010c00 	.word	0x40010c00

08000770 <LED_Blink_1500ms>:
void LED_Blink_1500ms(){
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000774:	2104      	movs	r1, #4
 8000776:	4802      	ldr	r0, [pc, #8]	; (8000780 <LED_Blink_1500ms+0x10>)
 8000778:	f001 f928 	bl	80019cc <HAL_GPIO_TogglePin>
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40010c00 	.word	0x40010c00

08000784 <LED_Blink_2000ms>:
void LED_Blink_2000ms(){
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8000788:	2108      	movs	r1, #8
 800078a:	4802      	ldr	r0, [pc, #8]	; (8000794 <LED_Blink_2000ms+0x10>)
 800078c:	f001 f91e 	bl	80019cc <HAL_GPIO_TogglePin>
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40010c00 	.word	0x40010c00

08000798 <LED_Blink_2500ms>:
void LED_Blink_2500ms(){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 800079c:	2110      	movs	r1, #16
 800079e:	4802      	ldr	r0, [pc, #8]	; (80007a8 <LED_Blink_2500ms+0x10>)
 80007a0:	f001 f914 	bl	80019cc <HAL_GPIO_TogglePin>
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40010c00 	.word	0x40010c00

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 fb44 	bl	8000e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f840 	bl	8000838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b8:	f000 f942 	bl	8000a40 <MX_GPIO_Init>
  MX_TIM2_Init();
 80007bc:	f000 f8ca 	bl	8000954 <MX_TIM2_Init>
  MX_ADC1_Init();
 80007c0:	f000 f88a 	bl	80008d8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80007c4:	f000 f912 	bl	80009ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 80007c8:	2201      	movs	r2, #1
 80007ca:	4913      	ldr	r1, [pc, #76]	; (8000818 <main+0x6c>)
 80007cc:	4813      	ldr	r0, [pc, #76]	; (800081c <main+0x70>)
 80007ce:	f002 fa98 	bl	8002d02 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80007d2:	4813      	ldr	r0, [pc, #76]	; (8000820 <main+0x74>)
 80007d4:	f001 fe2a 	bl	800242c <HAL_TIM_Base_Start_IT>
#ifdef TASK_SCHEDULE
  SCH_Init();
 80007d8:	f7ff ff80 	bl	80006dc <SCH_Init>
  initTask();
 80007dc:	f7ff ff94 	bl	8000708 <initTask>
  SCH_Add_Task(LED_Blink_500ms, 50, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2132      	movs	r1, #50	; 0x32
 80007e4:	480f      	ldr	r0, [pc, #60]	; (8000824 <main+0x78>)
 80007e6:	f7ff fcb1 	bl	800014c <SCH_Add_Task>
  SCH_Add_Task(LED_Blink_1000ms, 2, 100);
 80007ea:	2264      	movs	r2, #100	; 0x64
 80007ec:	2102      	movs	r1, #2
 80007ee:	480e      	ldr	r0, [pc, #56]	; (8000828 <main+0x7c>)
 80007f0:	f7ff fcac 	bl	800014c <SCH_Add_Task>
  SCH_Add_Task(LED_Blink_1500ms, 3, 150);
 80007f4:	2296      	movs	r2, #150	; 0x96
 80007f6:	2103      	movs	r1, #3
 80007f8:	480c      	ldr	r0, [pc, #48]	; (800082c <main+0x80>)
 80007fa:	f7ff fca7 	bl	800014c <SCH_Add_Task>
  SCH_Add_Task(LED_Blink_2000ms, 4, 200);
 80007fe:	22c8      	movs	r2, #200	; 0xc8
 8000800:	2104      	movs	r1, #4
 8000802:	480b      	ldr	r0, [pc, #44]	; (8000830 <main+0x84>)
 8000804:	f7ff fca2 	bl	800014c <SCH_Add_Task>
  SCH_Add_Task(LED_Blink_2500ms, 5, 250);
 8000808:	22fa      	movs	r2, #250	; 0xfa
 800080a:	2105      	movs	r1, #5
 800080c:	4809      	ldr	r0, [pc, #36]	; (8000834 <main+0x88>)
 800080e:	f7ff fc9d 	bl	800014c <SCH_Add_Task>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#ifdef TASK_SCHEDULE
	  SCH_Dispatch_Tasks();
 8000812:	f7ff ff21 	bl	8000658 <SCH_Dispatch_Tasks>
 8000816:	e7fc      	b.n	8000812 <main+0x66>
 8000818:	20000208 	.word	0x20000208
 800081c:	200001c0 	.word	0x200001c0
 8000820:	20000178 	.word	0x20000178
 8000824:	08000749 	.word	0x08000749
 8000828:	0800075d 	.word	0x0800075d
 800082c:	08000771 	.word	0x08000771
 8000830:	08000785 	.word	0x08000785
 8000834:	08000799 	.word	0x08000799

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b094      	sub	sp, #80	; 0x50
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000842:	2228      	movs	r2, #40	; 0x28
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f003 f820 	bl	800388c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000868:	2302      	movs	r3, #2
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086c:	2301      	movs	r3, #1
 800086e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000870:	2310      	movs	r3, #16
 8000872:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000874:	2300      	movs	r3, #0
 8000876:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000878:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800087c:	4618      	mov	r0, r3
 800087e:	f001 f8bf 	bl	8001a00 <HAL_RCC_OscConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000888:	f000 f960 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088c:	230f      	movs	r3, #15
 800088e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 fb2c 	bl	8001f04 <HAL_RCC_ClockConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80008b2:	f000 f94b 	bl	8000b4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008b6:	2302      	movs	r3, #2
 80008b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	4618      	mov	r0, r3
 80008c2:	f001 fcad 	bl	8002220 <HAL_RCCEx_PeriphCLKConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008cc:	f000 f93e 	bl	8000b4c <Error_Handler>
  }
}
 80008d0:	bf00      	nop
 80008d2:	3750      	adds	r7, #80	; 0x50
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008e8:	4b18      	ldr	r3, [pc, #96]	; (800094c <MX_ADC1_Init+0x74>)
 80008ea:	4a19      	ldr	r2, [pc, #100]	; (8000950 <MX_ADC1_Init+0x78>)
 80008ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_ADC1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_ADC1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_ADC1_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_ADC1_Init+0x74>)
 8000902:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000906:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000908:	4b10      	ldr	r3, [pc, #64]	; (800094c <MX_ADC1_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_ADC1_Init+0x74>)
 8000910:	2201      	movs	r2, #1
 8000912:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <MX_ADC1_Init+0x74>)
 8000916:	f000 faf3 	bl	8000f00 <HAL_ADC_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000920:	f000 f914 	bl	8000b4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000924:	2300      	movs	r3, #0
 8000926:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000928:	2301      	movs	r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_ADC1_Init+0x74>)
 8000936:	f000 fbbb 	bl	80010b0 <HAL_ADC_ConfigChannel>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000940:	f000 f904 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000148 	.word	0x20000148
 8000950:	40012400 	.word	0x40012400

08000954 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800095a:	f107 0308 	add.w	r3, r7, #8
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000968:	463b      	mov	r3, r7
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000970:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <MX_TIM2_Init+0x94>)
 8000972:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000976:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <MX_TIM2_Init+0x94>)
 800097a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800097e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000980:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <MX_TIM2_Init+0x94>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_TIM2_Init+0x94>)
 8000988:	2209      	movs	r2, #9
 800098a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <MX_TIM2_Init+0x94>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_TIM2_Init+0x94>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000998:	4813      	ldr	r0, [pc, #76]	; (80009e8 <MX_TIM2_Init+0x94>)
 800099a:	f001 fcf7 	bl	800238c <HAL_TIM_Base_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009a4:	f000 f8d2 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	4619      	mov	r1, r3
 80009b4:	480c      	ldr	r0, [pc, #48]	; (80009e8 <MX_TIM2_Init+0x94>)
 80009b6:	f001 fe8d 	bl	80026d4 <HAL_TIM_ConfigClockSource>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009c0:	f000 f8c4 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c4:	2300      	movs	r3, #0
 80009c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009cc:	463b      	mov	r3, r7
 80009ce:	4619      	mov	r1, r3
 80009d0:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_TIM2_Init+0x94>)
 80009d2:	f002 f859 	bl	8002a88 <HAL_TIMEx_MasterConfigSynchronization>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009dc:	f000 f8b6 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000178 	.word	0x20000178

080009ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <MX_USART2_UART_Init+0x50>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 80009f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a24:	f002 f89a 	bl	8002b5c <HAL_UART_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a2e:	f000 f88d 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200001c0 	.word	0x200001c0
 8000a3c:	40004400 	.word	0x40004400

08000a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 0308 	add.w	r3, r7, #8
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_GPIO_Init+0x74>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a16      	ldr	r2, [pc, #88]	; (8000ab4 <MX_GPIO_Init+0x74>)
 8000a5a:	f043 0304 	orr.w	r3, r3, #4
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_GPIO_Init+0x74>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0304 	and.w	r3, r3, #4
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_GPIO_Init+0x74>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a10      	ldr	r2, [pc, #64]	; (8000ab4 <MX_GPIO_Init+0x74>)
 8000a72:	f043 0308 	orr.w	r3, r3, #8
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_GPIO_Init+0x74>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0308 	and.w	r3, r3, #8
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000a84:	2200      	movs	r2, #0
 8000a86:	211f      	movs	r1, #31
 8000a88:	480b      	ldr	r0, [pc, #44]	; (8000ab8 <MX_GPIO_Init+0x78>)
 8000a8a:	f000 ff87 	bl	800199c <HAL_GPIO_WritePin>
                          |LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000a8e:	231f      	movs	r3, #31
 8000a90:	60bb      	str	r3, [r7, #8]
                          |LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	f107 0308 	add.w	r3, r7, #8
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_GPIO_Init+0x78>)
 8000aa6:	f000 fdfd 	bl	80016a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aaa:	bf00      	nop
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010c00 	.word	0x40010c00

08000abc <debugPrintout>:

/* USER CODE BEGIN 4 */
void debugPrintout(uint8_t num,uint8_t id){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	460a      	mov	r2, r1
 8000ac6:	71fb      	strb	r3, [r7, #7]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	71bb      	strb	r3, [r7, #6]
	HAL_UART_Transmit(&huart2, (uint8_t*) str, sprintf((char*)str, "Task %d: %d\r\n",id, num), 100);
 8000acc:	79ba      	ldrb	r2, [r7, #6]
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	4907      	ldr	r1, [pc, #28]	; (8000af0 <debugPrintout+0x34>)
 8000ad2:	4808      	ldr	r0, [pc, #32]	; (8000af4 <debugPrintout+0x38>)
 8000ad4:	f002 feba 	bl	800384c <siprintf>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	2364      	movs	r3, #100	; 0x64
 8000ade:	4905      	ldr	r1, [pc, #20]	; (8000af4 <debugPrintout+0x38>)
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <debugPrintout+0x3c>)
 8000ae2:	f002 f88b 	bl	8002bfc <HAL_UART_Transmit>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	080041c8 	.word	0x080041c8
 8000af4:	2000020c 	.word	0x2000020c
 8000af8:	200001c0 	.word	0x200001c0

08000afc <HAL_TIM_PeriodElapsedCallback>:
int num = 1;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
#ifdef TASK_SCHEDULE
	SCH_Update();
 8000b04:	f7ff fc8a 	bl	800041c <SCH_Update>

#endif
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <HAL_UART_RxCpltCallback+0x30>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d10a      	bne.n	8000b38 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 8000b22:	2332      	movs	r3, #50	; 0x32
 8000b24:	2201      	movs	r2, #1
 8000b26:	4907      	ldr	r1, [pc, #28]	; (8000b44 <HAL_UART_RxCpltCallback+0x34>)
 8000b28:	4807      	ldr	r0, [pc, #28]	; (8000b48 <HAL_UART_RxCpltCallback+0x38>)
 8000b2a:	f002 f867 	bl	8002bfc <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4904      	ldr	r1, [pc, #16]	; (8000b44 <HAL_UART_RxCpltCallback+0x34>)
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <HAL_UART_RxCpltCallback+0x38>)
 8000b34:	f002 f8e5 	bl	8002d02 <HAL_UART_Receive_IT>
	}
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40004400 	.word	0x40004400
 8000b44:	20000208 	.word	0x20000208
 8000b48:	200001c0 	.word	0x200001c0

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <Error_Handler+0x8>
	...

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_MspInit+0x40>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <HAL_MspInit+0x40>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6193      	str	r3, [r2, #24]
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_MspInit+0x40>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_MspInit+0x40>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <HAL_MspInit+0x40>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	61d3      	str	r3, [r2, #28]
 8000b82:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <HAL_MspInit+0x40>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr
 8000b98:	40021000 	.word	0x40021000

08000b9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <HAL_ADC_MspInit+0x6c>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d121      	bne.n	8000c00 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <HAL_ADC_MspInit+0x70>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <HAL_ADC_MspInit+0x70>)
 8000bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <HAL_ADC_MspInit+0x70>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd4:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <HAL_ADC_MspInit+0x70>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a0c      	ldr	r2, [pc, #48]	; (8000c0c <HAL_ADC_MspInit+0x70>)
 8000bda:	f043 0304 	orr.w	r3, r3, #4
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <HAL_ADC_MspInit+0x70>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bec:	2301      	movs	r3, #1
 8000bee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4805      	ldr	r0, [pc, #20]	; (8000c10 <HAL_ADC_MspInit+0x74>)
 8000bfc:	f000 fd52 	bl	80016a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c00:	bf00      	nop
 8000c02:	3720      	adds	r7, #32
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40012400 	.word	0x40012400
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40010800 	.word	0x40010800

08000c14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c24:	d113      	bne.n	8000c4e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <HAL_TIM_Base_MspInit+0x44>)
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <HAL_TIM_Base_MspInit+0x44>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	61d3      	str	r3, [r2, #28]
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_TIM_Base_MspInit+0x44>)
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	201c      	movs	r0, #28
 8000c44:	f000 fc45 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c48:	201c      	movs	r0, #28
 8000c4a:	f000 fc5e 	bl	800150a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40021000 	.word	0x40021000

08000c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b088      	sub	sp, #32
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a1f      	ldr	r2, [pc, #124]	; (8000cf4 <HAL_UART_MspInit+0x98>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d137      	bne.n	8000cec <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c7c:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <HAL_UART_MspInit+0x9c>)
 8000c7e:	69db      	ldr	r3, [r3, #28]
 8000c80:	4a1d      	ldr	r2, [pc, #116]	; (8000cf8 <HAL_UART_MspInit+0x9c>)
 8000c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c86:	61d3      	str	r3, [r2, #28]
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <HAL_UART_MspInit+0x9c>)
 8000c8a:	69db      	ldr	r3, [r3, #28]
 8000c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <HAL_UART_MspInit+0x9c>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a17      	ldr	r2, [pc, #92]	; (8000cf8 <HAL_UART_MspInit+0x9c>)
 8000c9a:	f043 0304 	orr.w	r3, r3, #4
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <HAL_UART_MspInit+0x9c>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cac:	2304      	movs	r3, #4
 8000cae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	480f      	ldr	r0, [pc, #60]	; (8000cfc <HAL_UART_MspInit+0xa0>)
 8000cc0:	f000 fcf0 	bl	80016a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cc4:	2308      	movs	r3, #8
 8000cc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4809      	ldr	r0, [pc, #36]	; (8000cfc <HAL_UART_MspInit+0xa0>)
 8000cd8:	f000 fce4 	bl	80016a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2026      	movs	r0, #38	; 0x26
 8000ce2:	f000 fbf6 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ce6:	2026      	movs	r0, #38	; 0x26
 8000ce8:	f000 fc0f 	bl	800150a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cec:	bf00      	nop
 8000cee:	3720      	adds	r7, #32
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40004400 	.word	0x40004400
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010800 	.word	0x40010800

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <NMI_Handler+0x4>

08000d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <HardFault_Handler+0x4>

08000d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <MemManage_Handler+0x4>

08000d12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <BusFault_Handler+0x4>

08000d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <UsageFault_Handler+0x4>

08000d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr

08000d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr

08000d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr

08000d42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d46:	f000 f8bf 	bl	8000ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <TIM2_IRQHandler+0x10>)
 8000d56:	f001 fbb5 	bl	80024c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000178 	.word	0x20000178

08000d64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <USART2_IRQHandler+0x10>)
 8000d6a:	f001 ffef 	bl	8002d4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200001c0 	.word	0x200001c0

08000d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d80:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <_sbrk+0x5c>)
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <_sbrk+0x60>)
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d102      	bne.n	8000d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <_sbrk+0x64>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <_sbrk+0x68>)
 8000d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d207      	bcs.n	8000db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da8:	f002 fd78 	bl	800389c <__errno>
 8000dac:	4603      	mov	r3, r0
 8000dae:	220c      	movs	r2, #12
 8000db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000db6:	e009      	b.n	8000dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dbe:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <_sbrk+0x64>)
 8000dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dca:	68fb      	ldr	r3, [r7, #12]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20002800 	.word	0x20002800
 8000dd8:	00000400 	.word	0x00000400
 8000ddc:	20000218 	.word	0x20000218
 8000de0:	20000368 	.word	0x20000368

08000de4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000df0:	f7ff fff8 	bl	8000de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df4:	480b      	ldr	r0, [pc, #44]	; (8000e24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000df6:	490c      	ldr	r1, [pc, #48]	; (8000e28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000df8:	4a0c      	ldr	r2, [pc, #48]	; (8000e2c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a09      	ldr	r2, [pc, #36]	; (8000e30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e0c:	4c09      	ldr	r4, [pc, #36]	; (8000e34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e1a:	f002 fd45 	bl	80038a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e1e:	f7ff fcc5 	bl	80007ac <main>
  bx lr
 8000e22:	4770      	bx	lr
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e2c:	08004240 	.word	0x08004240
  ldr r2, =_sbss
 8000e30:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e34:	20000368 	.word	0x20000368

08000e38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC1_2_IRQHandler>
	...

08000e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <HAL_Init+0x28>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <HAL_Init+0x28>)
 8000e46:	f043 0310 	orr.w	r3, r3, #16
 8000e4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4c:	2003      	movs	r0, #3
 8000e4e:	f000 fb35 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e52:	200f      	movs	r0, #15
 8000e54:	f000 f808 	bl	8000e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e58:	f7ff fe7e 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40022000 	.word	0x40022000

08000e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_InitTick+0x54>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_InitTick+0x58>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 fb4d 	bl	8001526 <HAL_SYSTICK_Config>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e00e      	b.n	8000eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b0f      	cmp	r3, #15
 8000e9a:	d80a      	bhi.n	8000eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ea4:	f000 fb15 	bl	80014d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea8:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <HAL_InitTick+0x5c>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e000      	b.n	8000eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000004 	.word	0x20000004

08000ec8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <HAL_IncTick+0x1c>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <HAL_IncTick+0x20>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4a03      	ldr	r2, [pc, #12]	; (8000ee8 <HAL_IncTick+0x20>)
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	2000021c 	.word	0x2000021c

08000eec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef0:	4b02      	ldr	r3, [pc, #8]	; (8000efc <HAL_GetTick+0x10>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	2000021c 	.word	0x2000021c

08000f00 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d101      	bne.n	8000f22 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e0be      	b.n	80010a0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d109      	bne.n	8000f44 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff fe2c 	bl	8000b9c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f000 f9ab 	bl	80012a0 <ADC_ConversionStop_Disable>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f52:	f003 0310 	and.w	r3, r3, #16
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f040 8099 	bne.w	800108e <HAL_ADC_Init+0x18e>
 8000f5c:	7dfb      	ldrb	r3, [r7, #23]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f040 8095 	bne.w	800108e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f68:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f6c:	f023 0302 	bic.w	r3, r3, #2
 8000f70:	f043 0202 	orr.w	r2, r3, #2
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f80:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	7b1b      	ldrb	r3, [r3, #12]
 8000f86:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f88:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f98:	d003      	beq.n	8000fa2 <HAL_ADC_Init+0xa2>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d102      	bne.n	8000fa8 <HAL_ADC_Init+0xa8>
 8000fa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa6:	e000      	b.n	8000faa <HAL_ADC_Init+0xaa>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7d1b      	ldrb	r3, [r3, #20]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d119      	bne.n	8000fec <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7b1b      	ldrb	r3, [r3, #12]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d109      	bne.n	8000fd4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	035a      	lsls	r2, r3, #13
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	e00b      	b.n	8000fec <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd8:	f043 0220 	orr.w	r2, r3, #32
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe4:	f043 0201 	orr.w	r2, r3, #1
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <HAL_ADC_Init+0x1a8>)
 8001008:	4013      	ands	r3, r2
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	6812      	ldr	r2, [r2, #0]
 800100e:	68b9      	ldr	r1, [r7, #8]
 8001010:	430b      	orrs	r3, r1
 8001012:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800101c:	d003      	beq.n	8001026 <HAL_ADC_Init+0x126>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d104      	bne.n	8001030 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	3b01      	subs	r3, #1
 800102c:	051b      	lsls	r3, r3, #20
 800102e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001036:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	430a      	orrs	r2, r1
 8001042:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <HAL_ADC_Init+0x1ac>)
 800104c:	4013      	ands	r3, r2
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	429a      	cmp	r2, r3
 8001052:	d10b      	bne.n	800106c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105e:	f023 0303 	bic.w	r3, r3, #3
 8001062:	f043 0201 	orr.w	r2, r3, #1
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800106a:	e018      	b.n	800109e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001070:	f023 0312 	bic.w	r3, r3, #18
 8001074:	f043 0210 	orr.w	r2, r3, #16
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001080:	f043 0201 	orr.w	r2, r3, #1
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800108c:	e007      	b.n	800109e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001092:	f043 0210 	orr.w	r2, r3, #16
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800109e:	7dfb      	ldrb	r3, [r7, #23]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	ffe1f7fd 	.word	0xffe1f7fd
 80010ac:	ff1f0efe 	.word	0xff1f0efe

080010b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ba:	2300      	movs	r3, #0
 80010bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d101      	bne.n	80010d0 <HAL_ADC_ConfigChannel+0x20>
 80010cc:	2302      	movs	r3, #2
 80010ce:	e0dc      	b.n	800128a <HAL_ADC_ConfigChannel+0x1da>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2201      	movs	r2, #1
 80010d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b06      	cmp	r3, #6
 80010de:	d81c      	bhi.n	800111a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	3b05      	subs	r3, #5
 80010f2:	221f      	movs	r2, #31
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	4019      	ands	r1, r3
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	3b05      	subs	r3, #5
 800110c:	fa00 f203 	lsl.w	r2, r0, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	430a      	orrs	r2, r1
 8001116:	635a      	str	r2, [r3, #52]	; 0x34
 8001118:	e03c      	b.n	8001194 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b0c      	cmp	r3, #12
 8001120:	d81c      	bhi.n	800115c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	3b23      	subs	r3, #35	; 0x23
 8001134:	221f      	movs	r2, #31
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	4019      	ands	r1, r3
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	3b23      	subs	r3, #35	; 0x23
 800114e:	fa00 f203 	lsl.w	r2, r0, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	631a      	str	r2, [r3, #48]	; 0x30
 800115a:	e01b      	b.n	8001194 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	3b41      	subs	r3, #65	; 0x41
 800116e:	221f      	movs	r2, #31
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	4019      	ands	r1, r3
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	3b41      	subs	r3, #65	; 0x41
 8001188:	fa00 f203 	lsl.w	r2, r0, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	430a      	orrs	r2, r1
 8001192:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b09      	cmp	r3, #9
 800119a:	d91c      	bls.n	80011d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	68d9      	ldr	r1, [r3, #12]
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	4613      	mov	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	4413      	add	r3, r2
 80011ac:	3b1e      	subs	r3, #30
 80011ae:	2207      	movs	r2, #7
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	4019      	ands	r1, r3
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	6898      	ldr	r0, [r3, #8]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	3b1e      	subs	r3, #30
 80011c8:	fa00 f203 	lsl.w	r2, r0, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	430a      	orrs	r2, r1
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	e019      	b.n	800120a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	6919      	ldr	r1, [r3, #16]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4613      	mov	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	2207      	movs	r2, #7
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	4019      	ands	r1, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	6898      	ldr	r0, [r3, #8]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4613      	mov	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4413      	add	r3, r2
 80011fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	430a      	orrs	r2, r1
 8001208:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b10      	cmp	r3, #16
 8001210:	d003      	beq.n	800121a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001216:	2b11      	cmp	r3, #17
 8001218:	d132      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a1d      	ldr	r2, [pc, #116]	; (8001294 <HAL_ADC_ConfigChannel+0x1e4>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d125      	bne.n	8001270 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d126      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001240:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b10      	cmp	r3, #16
 8001248:	d11a      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <HAL_ADC_ConfigChannel+0x1e8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a13      	ldr	r2, [pc, #76]	; (800129c <HAL_ADC_ConfigChannel+0x1ec>)
 8001250:	fba2 2303 	umull	r2, r3, r2, r3
 8001254:	0c9a      	lsrs	r2, r3, #18
 8001256:	4613      	mov	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001260:	e002      	b.n	8001268 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	3b01      	subs	r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f9      	bne.n	8001262 <HAL_ADC_ConfigChannel+0x1b2>
 800126e:	e007      	b.n	8001280 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001274:	f043 0220 	orr.w	r2, r3, #32
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001288:	7bfb      	ldrb	r3, [r7, #15]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	40012400 	.word	0x40012400
 8001298:	20000000 	.word	0x20000000
 800129c:	431bde83 	.word	0x431bde83

080012a0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d12e      	bne.n	8001318 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0201 	bic.w	r2, r2, #1
 80012c8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012ca:	f7ff fe0f 	bl	8000eec <HAL_GetTick>
 80012ce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012d0:	e01b      	b.n	800130a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012d2:	f7ff fe0b 	bl	8000eec <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d914      	bls.n	800130a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d10d      	bne.n	800130a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f2:	f043 0210 	orr.w	r2, r3, #16
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fe:	f043 0201 	orr.w	r2, r3, #1
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e007      	b.n	800131a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	2b01      	cmp	r3, #1
 8001316:	d0dc      	beq.n	80012d2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001340:	4013      	ands	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800134c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001356:	4a04      	ldr	r2, [pc, #16]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	60d3      	str	r3, [r2, #12]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <__NVIC_GetPriorityGrouping+0x18>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	f003 0307 	and.w	r3, r3, #7
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	2b00      	cmp	r3, #0
 8001398:	db0b      	blt.n	80013b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	f003 021f 	and.w	r2, r3, #31
 80013a0:	4906      	ldr	r1, [pc, #24]	; (80013bc <__NVIC_EnableIRQ+0x34>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	095b      	lsrs	r3, r3, #5
 80013a8:	2001      	movs	r0, #1
 80013aa:	fa00 f202 	lsl.w	r2, r0, r2
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100

080013c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	db0a      	blt.n	80013ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	490c      	ldr	r1, [pc, #48]	; (800140c <__NVIC_SetPriority+0x4c>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	0112      	lsls	r2, r2, #4
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	440b      	add	r3, r1
 80013e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e8:	e00a      	b.n	8001400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4908      	ldr	r1, [pc, #32]	; (8001410 <__NVIC_SetPriority+0x50>)
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	3b04      	subs	r3, #4
 80013f8:	0112      	lsls	r2, r2, #4
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	440b      	add	r3, r1
 80013fe:	761a      	strb	r2, [r3, #24]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000e100 	.word	0xe000e100
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	; 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f1c3 0307 	rsb	r3, r3, #7
 800142e:	2b04      	cmp	r3, #4
 8001430:	bf28      	it	cs
 8001432:	2304      	movcs	r3, #4
 8001434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3304      	adds	r3, #4
 800143a:	2b06      	cmp	r3, #6
 800143c:	d902      	bls.n	8001444 <NVIC_EncodePriority+0x30>
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3b03      	subs	r3, #3
 8001442:	e000      	b.n	8001446 <NVIC_EncodePriority+0x32>
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	401a      	ands	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800145c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	43d9      	mvns	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	4313      	orrs	r3, r2
         );
}
 800146e:	4618      	mov	r0, r3
 8001470:	3724      	adds	r7, #36	; 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001488:	d301      	bcc.n	800148e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148a:	2301      	movs	r3, #1
 800148c:	e00f      	b.n	80014ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <SysTick_Config+0x40>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001496:	210f      	movs	r1, #15
 8001498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800149c:	f7ff ff90 	bl	80013c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <SysTick_Config+0x40>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <SysTick_Config+0x40>)
 80014a8:	2207      	movs	r2, #7
 80014aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	e000e010 	.word	0xe000e010

080014bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff2d 	bl	8001324 <__NVIC_SetPriorityGrouping>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e4:	f7ff ff42 	bl	800136c <__NVIC_GetPriorityGrouping>
 80014e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	6978      	ldr	r0, [r7, #20]
 80014f0:	f7ff ff90 	bl	8001414 <NVIC_EncodePriority>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff5f 	bl	80013c0 <__NVIC_SetPriority>
}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff35 	bl	8001388 <__NVIC_EnableIRQ>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ffa2 	bl	8001478 <SysTick_Config>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800153e:	b480      	push	{r7}
 8001540:	b085      	sub	sp, #20
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d008      	beq.n	8001568 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2204      	movs	r2, #4
 800155a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e020      	b.n	80015aa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 020e 	bic.w	r2, r2, #14
 8001576:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0201 	bic.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001590:	2101      	movs	r1, #1
 8001592:	fa01 f202 	lsl.w	r2, r1, r2
 8001596:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d005      	beq.n	80015d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2204      	movs	r2, #4
 80015d0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	73fb      	strb	r3, [r7, #15]
 80015d6:	e051      	b.n	800167c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 020e 	bic.w	r2, r2, #14
 80015e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0201 	bic.w	r2, r2, #1
 80015f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a22      	ldr	r2, [pc, #136]	; (8001688 <HAL_DMA_Abort_IT+0xd4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d029      	beq.n	8001656 <HAL_DMA_Abort_IT+0xa2>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a21      	ldr	r2, [pc, #132]	; (800168c <HAL_DMA_Abort_IT+0xd8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d022      	beq.n	8001652 <HAL_DMA_Abort_IT+0x9e>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a1f      	ldr	r2, [pc, #124]	; (8001690 <HAL_DMA_Abort_IT+0xdc>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d01a      	beq.n	800164c <HAL_DMA_Abort_IT+0x98>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a1e      	ldr	r2, [pc, #120]	; (8001694 <HAL_DMA_Abort_IT+0xe0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d012      	beq.n	8001646 <HAL_DMA_Abort_IT+0x92>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a1c      	ldr	r2, [pc, #112]	; (8001698 <HAL_DMA_Abort_IT+0xe4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d00a      	beq.n	8001640 <HAL_DMA_Abort_IT+0x8c>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a1b      	ldr	r2, [pc, #108]	; (800169c <HAL_DMA_Abort_IT+0xe8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d102      	bne.n	800163a <HAL_DMA_Abort_IT+0x86>
 8001634:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001638:	e00e      	b.n	8001658 <HAL_DMA_Abort_IT+0xa4>
 800163a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800163e:	e00b      	b.n	8001658 <HAL_DMA_Abort_IT+0xa4>
 8001640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001644:	e008      	b.n	8001658 <HAL_DMA_Abort_IT+0xa4>
 8001646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164a:	e005      	b.n	8001658 <HAL_DMA_Abort_IT+0xa4>
 800164c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001650:	e002      	b.n	8001658 <HAL_DMA_Abort_IT+0xa4>
 8001652:	2310      	movs	r3, #16
 8001654:	e000      	b.n	8001658 <HAL_DMA_Abort_IT+0xa4>
 8001656:	2301      	movs	r3, #1
 8001658:	4a11      	ldr	r2, [pc, #68]	; (80016a0 <HAL_DMA_Abort_IT+0xec>)
 800165a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	4798      	blx	r3
    } 
  }
  return status;
 800167c:	7bfb      	ldrb	r3, [r7, #15]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40020008 	.word	0x40020008
 800168c:	4002001c 	.word	0x4002001c
 8001690:	40020030 	.word	0x40020030
 8001694:	40020044 	.word	0x40020044
 8001698:	40020058 	.word	0x40020058
 800169c:	4002006c 	.word	0x4002006c
 80016a0:	40020000 	.word	0x40020000

080016a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b08b      	sub	sp, #44	; 0x2c
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b6:	e161      	b.n	800197c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016b8:	2201      	movs	r2, #1
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	f040 8150 	bne.w	8001976 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	4a97      	ldr	r2, [pc, #604]	; (8001938 <HAL_GPIO_Init+0x294>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d05e      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 80016e0:	4a95      	ldr	r2, [pc, #596]	; (8001938 <HAL_GPIO_Init+0x294>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d875      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 80016e6:	4a95      	ldr	r2, [pc, #596]	; (800193c <HAL_GPIO_Init+0x298>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d058      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 80016ec:	4a93      	ldr	r2, [pc, #588]	; (800193c <HAL_GPIO_Init+0x298>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d86f      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 80016f2:	4a93      	ldr	r2, [pc, #588]	; (8001940 <HAL_GPIO_Init+0x29c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d052      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 80016f8:	4a91      	ldr	r2, [pc, #580]	; (8001940 <HAL_GPIO_Init+0x29c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d869      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 80016fe:	4a91      	ldr	r2, [pc, #580]	; (8001944 <HAL_GPIO_Init+0x2a0>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d04c      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 8001704:	4a8f      	ldr	r2, [pc, #572]	; (8001944 <HAL_GPIO_Init+0x2a0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d863      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 800170a:	4a8f      	ldr	r2, [pc, #572]	; (8001948 <HAL_GPIO_Init+0x2a4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d046      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 8001710:	4a8d      	ldr	r2, [pc, #564]	; (8001948 <HAL_GPIO_Init+0x2a4>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d85d      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 8001716:	2b12      	cmp	r3, #18
 8001718:	d82a      	bhi.n	8001770 <HAL_GPIO_Init+0xcc>
 800171a:	2b12      	cmp	r3, #18
 800171c:	d859      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 800171e:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <HAL_GPIO_Init+0x80>)
 8001720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001724:	0800179f 	.word	0x0800179f
 8001728:	08001779 	.word	0x08001779
 800172c:	0800178b 	.word	0x0800178b
 8001730:	080017cd 	.word	0x080017cd
 8001734:	080017d3 	.word	0x080017d3
 8001738:	080017d3 	.word	0x080017d3
 800173c:	080017d3 	.word	0x080017d3
 8001740:	080017d3 	.word	0x080017d3
 8001744:	080017d3 	.word	0x080017d3
 8001748:	080017d3 	.word	0x080017d3
 800174c:	080017d3 	.word	0x080017d3
 8001750:	080017d3 	.word	0x080017d3
 8001754:	080017d3 	.word	0x080017d3
 8001758:	080017d3 	.word	0x080017d3
 800175c:	080017d3 	.word	0x080017d3
 8001760:	080017d3 	.word	0x080017d3
 8001764:	080017d3 	.word	0x080017d3
 8001768:	08001781 	.word	0x08001781
 800176c:	08001795 	.word	0x08001795
 8001770:	4a76      	ldr	r2, [pc, #472]	; (800194c <HAL_GPIO_Init+0x2a8>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d013      	beq.n	800179e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001776:	e02c      	b.n	80017d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	623b      	str	r3, [r7, #32]
          break;
 800177e:	e029      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	3304      	adds	r3, #4
 8001786:	623b      	str	r3, [r7, #32]
          break;
 8001788:	e024      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	3308      	adds	r3, #8
 8001790:	623b      	str	r3, [r7, #32]
          break;
 8001792:	e01f      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	330c      	adds	r3, #12
 800179a:	623b      	str	r3, [r7, #32]
          break;
 800179c:	e01a      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017a6:	2304      	movs	r3, #4
 80017a8:	623b      	str	r3, [r7, #32]
          break;
 80017aa:	e013      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d105      	bne.n	80017c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b4:	2308      	movs	r3, #8
 80017b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	611a      	str	r2, [r3, #16]
          break;
 80017be:	e009      	b.n	80017d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c0:	2308      	movs	r3, #8
 80017c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	615a      	str	r2, [r3, #20]
          break;
 80017ca:	e003      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017cc:	2300      	movs	r3, #0
 80017ce:	623b      	str	r3, [r7, #32]
          break;
 80017d0:	e000      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          break;
 80017d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	2bff      	cmp	r3, #255	; 0xff
 80017d8:	d801      	bhi.n	80017de <HAL_GPIO_Init+0x13a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	e001      	b.n	80017e2 <HAL_GPIO_Init+0x13e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3304      	adds	r3, #4
 80017e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2bff      	cmp	r3, #255	; 0xff
 80017e8:	d802      	bhi.n	80017f0 <HAL_GPIO_Init+0x14c>
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	e002      	b.n	80017f6 <HAL_GPIO_Init+0x152>
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	3b08      	subs	r3, #8
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	210f      	movs	r1, #15
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	401a      	ands	r2, r3
 8001808:	6a39      	ldr	r1, [r7, #32]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	fa01 f303 	lsl.w	r3, r1, r3
 8001810:	431a      	orrs	r2, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 80a9 	beq.w	8001976 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001824:	4b4a      	ldr	r3, [pc, #296]	; (8001950 <HAL_GPIO_Init+0x2ac>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	4a49      	ldr	r2, [pc, #292]	; (8001950 <HAL_GPIO_Init+0x2ac>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6193      	str	r3, [r2, #24]
 8001830:	4b47      	ldr	r3, [pc, #284]	; (8001950 <HAL_GPIO_Init+0x2ac>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800183c:	4a45      	ldr	r2, [pc, #276]	; (8001954 <HAL_GPIO_Init+0x2b0>)
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	089b      	lsrs	r3, r3, #2
 8001842:	3302      	adds	r3, #2
 8001844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001848:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	220f      	movs	r2, #15
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4013      	ands	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a3d      	ldr	r2, [pc, #244]	; (8001958 <HAL_GPIO_Init+0x2b4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d00d      	beq.n	8001884 <HAL_GPIO_Init+0x1e0>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a3c      	ldr	r2, [pc, #240]	; (800195c <HAL_GPIO_Init+0x2b8>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d007      	beq.n	8001880 <HAL_GPIO_Init+0x1dc>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a3b      	ldr	r2, [pc, #236]	; (8001960 <HAL_GPIO_Init+0x2bc>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d101      	bne.n	800187c <HAL_GPIO_Init+0x1d8>
 8001878:	2302      	movs	r3, #2
 800187a:	e004      	b.n	8001886 <HAL_GPIO_Init+0x1e2>
 800187c:	2303      	movs	r3, #3
 800187e:	e002      	b.n	8001886 <HAL_GPIO_Init+0x1e2>
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <HAL_GPIO_Init+0x1e2>
 8001884:	2300      	movs	r3, #0
 8001886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001888:	f002 0203 	and.w	r2, r2, #3
 800188c:	0092      	lsls	r2, r2, #2
 800188e:	4093      	lsls	r3, r2
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4313      	orrs	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001896:	492f      	ldr	r1, [pc, #188]	; (8001954 <HAL_GPIO_Init+0x2b0>)
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	089b      	lsrs	r3, r3, #2
 800189c:	3302      	adds	r3, #2
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d006      	beq.n	80018be <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018b0:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <HAL_GPIO_Init+0x2c0>)
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	492b      	ldr	r1, [pc, #172]	; (8001964 <HAL_GPIO_Init+0x2c0>)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	608b      	str	r3, [r1, #8]
 80018bc:	e006      	b.n	80018cc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018be:	4b29      	ldr	r3, [pc, #164]	; (8001964 <HAL_GPIO_Init+0x2c0>)
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	4927      	ldr	r1, [pc, #156]	; (8001964 <HAL_GPIO_Init+0x2c0>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d006      	beq.n	80018e6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018d8:	4b22      	ldr	r3, [pc, #136]	; (8001964 <HAL_GPIO_Init+0x2c0>)
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	4921      	ldr	r1, [pc, #132]	; (8001964 <HAL_GPIO_Init+0x2c0>)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	60cb      	str	r3, [r1, #12]
 80018e4:	e006      	b.n	80018f4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018e6:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <HAL_GPIO_Init+0x2c0>)
 80018e8:	68da      	ldr	r2, [r3, #12]
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	491d      	ldr	r1, [pc, #116]	; (8001964 <HAL_GPIO_Init+0x2c0>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001900:	4b18      	ldr	r3, [pc, #96]	; (8001964 <HAL_GPIO_Init+0x2c0>)
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	4917      	ldr	r1, [pc, #92]	; (8001964 <HAL_GPIO_Init+0x2c0>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	604b      	str	r3, [r1, #4]
 800190c:	e006      	b.n	800191c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_GPIO_Init+0x2c0>)
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	43db      	mvns	r3, r3
 8001916:	4913      	ldr	r1, [pc, #76]	; (8001964 <HAL_GPIO_Init+0x2c0>)
 8001918:	4013      	ands	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d01f      	beq.n	8001968 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001928:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <HAL_GPIO_Init+0x2c0>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	490d      	ldr	r1, [pc, #52]	; (8001964 <HAL_GPIO_Init+0x2c0>)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	600b      	str	r3, [r1, #0]
 8001934:	e01f      	b.n	8001976 <HAL_GPIO_Init+0x2d2>
 8001936:	bf00      	nop
 8001938:	10320000 	.word	0x10320000
 800193c:	10310000 	.word	0x10310000
 8001940:	10220000 	.word	0x10220000
 8001944:	10210000 	.word	0x10210000
 8001948:	10120000 	.word	0x10120000
 800194c:	10110000 	.word	0x10110000
 8001950:	40021000 	.word	0x40021000
 8001954:	40010000 	.word	0x40010000
 8001958:	40010800 	.word	0x40010800
 800195c:	40010c00 	.word	0x40010c00
 8001960:	40011000 	.word	0x40011000
 8001964:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <HAL_GPIO_Init+0x2f4>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	43db      	mvns	r3, r3
 8001970:	4909      	ldr	r1, [pc, #36]	; (8001998 <HAL_GPIO_Init+0x2f4>)
 8001972:	4013      	ands	r3, r2
 8001974:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	3301      	adds	r3, #1
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	fa22 f303 	lsr.w	r3, r2, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	f47f ae96 	bne.w	80016b8 <HAL_GPIO_Init+0x14>
  }
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	372c      	adds	r7, #44	; 0x2c
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	40010400 	.word	0x40010400

0800199c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	807b      	strh	r3, [r7, #2]
 80019a8:	4613      	mov	r3, r2
 80019aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019ac:	787b      	ldrb	r3, [r7, #1]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019b2:	887a      	ldrh	r2, [r7, #2]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019b8:	e003      	b.n	80019c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019ba:	887b      	ldrh	r3, [r7, #2]
 80019bc:	041a      	lsls	r2, r3, #16
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	611a      	str	r2, [r3, #16]
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019de:	887a      	ldrh	r2, [r7, #2]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4013      	ands	r3, r2
 80019e4:	041a      	lsls	r2, r3, #16
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	43d9      	mvns	r1, r3
 80019ea:	887b      	ldrh	r3, [r7, #2]
 80019ec:	400b      	ands	r3, r1
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	611a      	str	r2, [r3, #16]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
	...

08001a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e272      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 8087 	beq.w	8001b2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a20:	4b92      	ldr	r3, [pc, #584]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d00c      	beq.n	8001a46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a2c:	4b8f      	ldr	r3, [pc, #572]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d112      	bne.n	8001a5e <HAL_RCC_OscConfig+0x5e>
 8001a38:	4b8c      	ldr	r3, [pc, #560]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a44:	d10b      	bne.n	8001a5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a46:	4b89      	ldr	r3, [pc, #548]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d06c      	beq.n	8001b2c <HAL_RCC_OscConfig+0x12c>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d168      	bne.n	8001b2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e24c      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a66:	d106      	bne.n	8001a76 <HAL_RCC_OscConfig+0x76>
 8001a68:	4b80      	ldr	r3, [pc, #512]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a7f      	ldr	r2, [pc, #508]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	e02e      	b.n	8001ad4 <HAL_RCC_OscConfig+0xd4>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10c      	bne.n	8001a98 <HAL_RCC_OscConfig+0x98>
 8001a7e:	4b7b      	ldr	r3, [pc, #492]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a7a      	ldr	r2, [pc, #488]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	4b78      	ldr	r3, [pc, #480]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a77      	ldr	r2, [pc, #476]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001a90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e01d      	b.n	8001ad4 <HAL_RCC_OscConfig+0xd4>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa0:	d10c      	bne.n	8001abc <HAL_RCC_OscConfig+0xbc>
 8001aa2:	4b72      	ldr	r3, [pc, #456]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a71      	ldr	r2, [pc, #452]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	4b6f      	ldr	r3, [pc, #444]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a6e      	ldr	r2, [pc, #440]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e00b      	b.n	8001ad4 <HAL_RCC_OscConfig+0xd4>
 8001abc:	4b6b      	ldr	r3, [pc, #428]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a6a      	ldr	r2, [pc, #424]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	4b68      	ldr	r3, [pc, #416]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a67      	ldr	r2, [pc, #412]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d013      	beq.n	8001b04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff fa06 	bl	8000eec <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae4:	f7ff fa02 	bl	8000eec <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b64      	cmp	r3, #100	; 0x64
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e200      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	4b5d      	ldr	r3, [pc, #372]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0xe4>
 8001b02:	e014      	b.n	8001b2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff f9f2 	bl	8000eec <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b0c:	f7ff f9ee 	bl	8000eec <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b64      	cmp	r3, #100	; 0x64
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e1ec      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1e:	4b53      	ldr	r3, [pc, #332]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x10c>
 8001b2a:	e000      	b.n	8001b2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d063      	beq.n	8001c02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b3a:	4b4c      	ldr	r3, [pc, #304]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00b      	beq.n	8001b5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b46:	4b49      	ldr	r3, [pc, #292]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d11c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x18c>
 8001b52:	4b46      	ldr	r3, [pc, #280]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d116      	bne.n	8001b8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5e:	4b43      	ldr	r3, [pc, #268]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d005      	beq.n	8001b76 <HAL_RCC_OscConfig+0x176>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d001      	beq.n	8001b76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e1c0      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b76:	4b3d      	ldr	r3, [pc, #244]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4939      	ldr	r1, [pc, #228]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8a:	e03a      	b.n	8001c02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d020      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b94:	4b36      	ldr	r3, [pc, #216]	; (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9a:	f7ff f9a7 	bl	8000eec <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba2:	f7ff f9a3 	bl	8000eec <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e1a1      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb4:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc0:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4927      	ldr	r1, [pc, #156]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	600b      	str	r3, [r1, #0]
 8001bd4:	e015      	b.n	8001c02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd6:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <HAL_RCC_OscConfig+0x270>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7ff f986 	bl	8000eec <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be4:	f7ff f982 	bl	8000eec <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e180      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf6:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d03a      	beq.n	8001c84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d019      	beq.n	8001c4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c16:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1c:	f7ff f966 	bl	8000eec <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c24:	f7ff f962 	bl	8000eec <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e160      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <HAL_RCC_OscConfig+0x26c>)
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c42:	2001      	movs	r0, #1
 8001c44:	f000 face 	bl	80021e4 <RCC_Delay>
 8001c48:	e01c      	b.n	8001c84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c50:	f7ff f94c 	bl	8000eec <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c56:	e00f      	b.n	8001c78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c58:	f7ff f948 	bl	8000eec <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d908      	bls.n	8001c78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e146      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	42420000 	.word	0x42420000
 8001c74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c78:	4b92      	ldr	r3, [pc, #584]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1e9      	bne.n	8001c58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 80a6 	beq.w	8001dde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c96:	4b8b      	ldr	r3, [pc, #556]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10d      	bne.n	8001cbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ca2:	4b88      	ldr	r3, [pc, #544]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4a87      	ldr	r2, [pc, #540]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cac:	61d3      	str	r3, [r2, #28]
 8001cae:	4b85      	ldr	r3, [pc, #532]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbe:	4b82      	ldr	r3, [pc, #520]	; (8001ec8 <HAL_RCC_OscConfig+0x4c8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d118      	bne.n	8001cfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cca:	4b7f      	ldr	r3, [pc, #508]	; (8001ec8 <HAL_RCC_OscConfig+0x4c8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a7e      	ldr	r2, [pc, #504]	; (8001ec8 <HAL_RCC_OscConfig+0x4c8>)
 8001cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cd6:	f7ff f909 	bl	8000eec <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cde:	f7ff f905 	bl	8000eec <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b64      	cmp	r3, #100	; 0x64
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e103      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf0:	4b75      	ldr	r3, [pc, #468]	; (8001ec8 <HAL_RCC_OscConfig+0x4c8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d106      	bne.n	8001d12 <HAL_RCC_OscConfig+0x312>
 8001d04:	4b6f      	ldr	r3, [pc, #444]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	4a6e      	ldr	r2, [pc, #440]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6213      	str	r3, [r2, #32]
 8001d10:	e02d      	b.n	8001d6e <HAL_RCC_OscConfig+0x36e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x334>
 8001d1a:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	4a69      	ldr	r2, [pc, #420]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	6213      	str	r3, [r2, #32]
 8001d26:	4b67      	ldr	r3, [pc, #412]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	4a66      	ldr	r2, [pc, #408]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	f023 0304 	bic.w	r3, r3, #4
 8001d30:	6213      	str	r3, [r2, #32]
 8001d32:	e01c      	b.n	8001d6e <HAL_RCC_OscConfig+0x36e>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	2b05      	cmp	r3, #5
 8001d3a:	d10c      	bne.n	8001d56 <HAL_RCC_OscConfig+0x356>
 8001d3c:	4b61      	ldr	r3, [pc, #388]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	4a60      	ldr	r2, [pc, #384]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d42:	f043 0304 	orr.w	r3, r3, #4
 8001d46:	6213      	str	r3, [r2, #32]
 8001d48:	4b5e      	ldr	r3, [pc, #376]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	4a5d      	ldr	r2, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6213      	str	r3, [r2, #32]
 8001d54:	e00b      	b.n	8001d6e <HAL_RCC_OscConfig+0x36e>
 8001d56:	4b5b      	ldr	r3, [pc, #364]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	4a5a      	ldr	r2, [pc, #360]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	6213      	str	r3, [r2, #32]
 8001d62:	4b58      	ldr	r3, [pc, #352]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	4a57      	ldr	r2, [pc, #348]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d68:	f023 0304 	bic.w	r3, r3, #4
 8001d6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d015      	beq.n	8001da2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d76:	f7ff f8b9 	bl	8000eec <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7c:	e00a      	b.n	8001d94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7e:	f7ff f8b5 	bl	8000eec <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e0b1      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d94:	4b4b      	ldr	r3, [pc, #300]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0ee      	beq.n	8001d7e <HAL_RCC_OscConfig+0x37e>
 8001da0:	e014      	b.n	8001dcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da2:	f7ff f8a3 	bl	8000eec <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da8:	e00a      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001daa:	f7ff f89f 	bl	8000eec <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e09b      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc0:	4b40      	ldr	r3, [pc, #256]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1ee      	bne.n	8001daa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dcc:	7dfb      	ldrb	r3, [r7, #23]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d105      	bne.n	8001dde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd2:	4b3c      	ldr	r3, [pc, #240]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	4a3b      	ldr	r2, [pc, #236]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8087 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de8:	4b36      	ldr	r3, [pc, #216]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 030c 	and.w	r3, r3, #12
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d061      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d146      	bne.n	8001e8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfc:	4b33      	ldr	r3, [pc, #204]	; (8001ecc <HAL_RCC_OscConfig+0x4cc>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7ff f873 	bl	8000eec <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0a:	f7ff f86f 	bl	8000eec <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e06d      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1c:	4b29      	ldr	r3, [pc, #164]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f0      	bne.n	8001e0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e30:	d108      	bne.n	8001e44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e32:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	4921      	ldr	r1, [pc, #132]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e44:	4b1f      	ldr	r3, [pc, #124]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a19      	ldr	r1, [r3, #32]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	430b      	orrs	r3, r1
 8001e56:	491b      	ldr	r1, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_RCC_OscConfig+0x4cc>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e62:	f7ff f843 	bl	8000eec <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6a:	f7ff f83f 	bl	8000eec <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e03d      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x46a>
 8001e88:	e035      	b.n	8001ef6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <HAL_RCC_OscConfig+0x4cc>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7ff f82c 	bl	8000eec <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e98:	f7ff f828 	bl	8000eec <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e026      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x498>
 8001eb6:	e01e      	b.n	8001ef6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d107      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e019      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_RCC_OscConfig+0x500>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d001      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000

08001f04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0d0      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f18:	4b6a      	ldr	r3, [pc, #424]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d910      	bls.n	8001f48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f26:	4b67      	ldr	r3, [pc, #412]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 0207 	bic.w	r2, r3, #7
 8001f2e:	4965      	ldr	r1, [pc, #404]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f36:	4b63      	ldr	r3, [pc, #396]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d001      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0b8      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d020      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f60:	4b59      	ldr	r3, [pc, #356]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	4a58      	ldr	r2, [pc, #352]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f78:	4b53      	ldr	r3, [pc, #332]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4a52      	ldr	r2, [pc, #328]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f84:	4b50      	ldr	r3, [pc, #320]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	494d      	ldr	r1, [pc, #308]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d040      	beq.n	8002024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001faa:	4b47      	ldr	r3, [pc, #284]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d115      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e07f      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d107      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc2:	4b41      	ldr	r3, [pc, #260]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d109      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e073      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd2:	4b3d      	ldr	r3, [pc, #244]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e06b      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fe2:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f023 0203 	bic.w	r2, r3, #3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4936      	ldr	r1, [pc, #216]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff4:	f7fe ff7a 	bl	8000eec <HAL_GetTick>
 8001ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffc:	f7fe ff76 	bl	8000eec <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	; 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e053      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002012:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 020c 	and.w	r2, r3, #12
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	429a      	cmp	r2, r3
 8002022:	d1eb      	bne.n	8001ffc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002024:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d210      	bcs.n	8002054 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 0207 	bic.w	r2, r3, #7
 800203a:	4922      	ldr	r1, [pc, #136]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002042:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e032      	b.n	80020ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4916      	ldr	r1, [pc, #88]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	4313      	orrs	r3, r2
 8002070:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d009      	beq.n	8002092 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800207e:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	490e      	ldr	r1, [pc, #56]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	4313      	orrs	r3, r2
 8002090:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002092:	f000 f821 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8002096:	4602      	mov	r2, r0
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	490a      	ldr	r1, [pc, #40]	; (80020cc <HAL_RCC_ClockConfig+0x1c8>)
 80020a4:	5ccb      	ldrb	r3, [r1, r3]
 80020a6:	fa22 f303 	lsr.w	r3, r2, r3
 80020aa:	4a09      	ldr	r2, [pc, #36]	; (80020d0 <HAL_RCC_ClockConfig+0x1cc>)
 80020ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_RCC_ClockConfig+0x1d0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fed8 	bl	8000e68 <HAL_InitTick>

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40022000 	.word	0x40022000
 80020c8:	40021000 	.word	0x40021000
 80020cc:	080041d8 	.word	0x080041d8
 80020d0:	20000000 	.word	0x20000000
 80020d4:	20000004 	.word	0x20000004

080020d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	2300      	movs	r3, #0
 80020ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020f2:	4b1e      	ldr	r3, [pc, #120]	; (800216c <HAL_RCC_GetSysClockFreq+0x94>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d002      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x30>
 8002102:	2b08      	cmp	r3, #8
 8002104:	d003      	beq.n	800210e <HAL_RCC_GetSysClockFreq+0x36>
 8002106:	e027      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002108:	4b19      	ldr	r3, [pc, #100]	; (8002170 <HAL_RCC_GetSysClockFreq+0x98>)
 800210a:	613b      	str	r3, [r7, #16]
      break;
 800210c:	e027      	b.n	800215e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	0c9b      	lsrs	r3, r3, #18
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	4a17      	ldr	r2, [pc, #92]	; (8002174 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002118:	5cd3      	ldrb	r3, [r2, r3]
 800211a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d010      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002126:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_RCC_GetSysClockFreq+0x94>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	0c5b      	lsrs	r3, r3, #17
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	4a11      	ldr	r2, [pc, #68]	; (8002178 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002132:	5cd3      	ldrb	r3, [r2, r3]
 8002134:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a0d      	ldr	r2, [pc, #52]	; (8002170 <HAL_RCC_GetSysClockFreq+0x98>)
 800213a:	fb03 f202 	mul.w	r2, r3, r2
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	fbb2 f3f3 	udiv	r3, r2, r3
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	e004      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a0c      	ldr	r2, [pc, #48]	; (800217c <HAL_RCC_GetSysClockFreq+0xa4>)
 800214c:	fb02 f303 	mul.w	r3, r2, r3
 8002150:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	613b      	str	r3, [r7, #16]
      break;
 8002156:	e002      	b.n	800215e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_RCC_GetSysClockFreq+0x98>)
 800215a:	613b      	str	r3, [r7, #16]
      break;
 800215c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800215e:	693b      	ldr	r3, [r7, #16]
}
 8002160:	4618      	mov	r0, r3
 8002162:	371c      	adds	r7, #28
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
 8002170:	007a1200 	.word	0x007a1200
 8002174:	080041f0 	.word	0x080041f0
 8002178:	08004200 	.word	0x08004200
 800217c:	003d0900 	.word	0x003d0900

08002180 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002184:	4b02      	ldr	r3, [pc, #8]	; (8002190 <HAL_RCC_GetHCLKFreq+0x10>)
 8002186:	681b      	ldr	r3, [r3, #0]
}
 8002188:	4618      	mov	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	20000000 	.word	0x20000000

08002194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002198:	f7ff fff2 	bl	8002180 <HAL_RCC_GetHCLKFreq>
 800219c:	4602      	mov	r2, r0
 800219e:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	0a1b      	lsrs	r3, r3, #8
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	4903      	ldr	r1, [pc, #12]	; (80021b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021aa:	5ccb      	ldrb	r3, [r1, r3]
 80021ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40021000 	.word	0x40021000
 80021b8:	080041e8 	.word	0x080041e8

080021bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021c0:	f7ff ffde 	bl	8002180 <HAL_RCC_GetHCLKFreq>
 80021c4:	4602      	mov	r2, r0
 80021c6:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	0adb      	lsrs	r3, r3, #11
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	4903      	ldr	r1, [pc, #12]	; (80021e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021d2:	5ccb      	ldrb	r3, [r1, r3]
 80021d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d8:	4618      	mov	r0, r3
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40021000 	.word	0x40021000
 80021e0:	080041e8 	.word	0x080041e8

080021e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <RCC_Delay+0x34>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a0a      	ldr	r2, [pc, #40]	; (800221c <RCC_Delay+0x38>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	0a5b      	lsrs	r3, r3, #9
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002200:	bf00      	nop
  }
  while (Delay --);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1e5a      	subs	r2, r3, #1
 8002206:	60fa      	str	r2, [r7, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f9      	bne.n	8002200 <RCC_Delay+0x1c>
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	20000000 	.word	0x20000000
 800221c:	10624dd3 	.word	0x10624dd3

08002220 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d07d      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800223c:	2300      	movs	r3, #0
 800223e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002240:	4b4f      	ldr	r3, [pc, #316]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10d      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224c:	4b4c      	ldr	r3, [pc, #304]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	4a4b      	ldr	r2, [pc, #300]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002256:	61d3      	str	r3, [r2, #28]
 8002258:	4b49      	ldr	r3, [pc, #292]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002264:	2301      	movs	r3, #1
 8002266:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002268:	4b46      	ldr	r3, [pc, #280]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d118      	bne.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002274:	4b43      	ldr	r3, [pc, #268]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a42      	ldr	r2, [pc, #264]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800227a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002280:	f7fe fe34 	bl	8000eec <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002286:	e008      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002288:	f7fe fe30 	bl	8000eec <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	; 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e06d      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229a:	4b3a      	ldr	r3, [pc, #232]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022a6:	4b36      	ldr	r3, [pc, #216]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d02e      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d027      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022c4:	4b2e      	ldr	r3, [pc, #184]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022ce:	4b2e      	ldr	r3, [pc, #184]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022d4:	4b2c      	ldr	r3, [pc, #176]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022da:	4a29      	ldr	r2, [pc, #164]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d014      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ea:	f7fe fdff 	bl	8000eec <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f0:	e00a      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7fe fdfb 	bl	8000eec <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e036      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002308:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0ee      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4917      	ldr	r1, [pc, #92]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002322:	4313      	orrs	r3, r2
 8002324:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002326:	7dfb      	ldrb	r3, [r7, #23]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d105      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232c:	4b14      	ldr	r3, [pc, #80]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	4a13      	ldr	r2, [pc, #76]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002336:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002344:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	490b      	ldr	r1, [pc, #44]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002352:	4313      	orrs	r3, r2
 8002354:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	2b00      	cmp	r3, #0
 8002360:	d008      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002362:	4b07      	ldr	r3, [pc, #28]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	4904      	ldr	r1, [pc, #16]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000
 8002384:	40007000 	.word	0x40007000
 8002388:	42420440 	.word	0x42420440

0800238c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e041      	b.n	8002422 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d106      	bne.n	80023b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7fe fc2e 	bl	8000c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2202      	movs	r2, #2
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3304      	adds	r3, #4
 80023c8:	4619      	mov	r1, r3
 80023ca:	4610      	mov	r0, r2
 80023cc:	f000 fa6e 	bl	80028ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b01      	cmp	r3, #1
 800243e:	d001      	beq.n	8002444 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e035      	b.n	80024b0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0201 	orr.w	r2, r2, #1
 800245a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a16      	ldr	r2, [pc, #88]	; (80024bc <HAL_TIM_Base_Start_IT+0x90>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d009      	beq.n	800247a <HAL_TIM_Base_Start_IT+0x4e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800246e:	d004      	beq.n	800247a <HAL_TIM_Base_Start_IT+0x4e>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <HAL_TIM_Base_Start_IT+0x94>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d111      	bne.n	800249e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2b06      	cmp	r3, #6
 800248a:	d010      	beq.n	80024ae <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800249c:	e007      	b.n	80024ae <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0201 	orr.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40012c00 	.word	0x40012c00
 80024c0:	40000400 	.word	0x40000400

080024c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d122      	bne.n	8002520 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d11b      	bne.n	8002520 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f06f 0202 	mvn.w	r2, #2
 80024f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f9b4 	bl	8002874 <HAL_TIM_IC_CaptureCallback>
 800250c:	e005      	b.n	800251a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f9a7 	bl	8002862 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f9b6 	bl	8002886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	2b04      	cmp	r3, #4
 800252c:	d122      	bne.n	8002574 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b04      	cmp	r3, #4
 800253a:	d11b      	bne.n	8002574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0204 	mvn.w	r2, #4
 8002544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2202      	movs	r2, #2
 800254a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f98a 	bl	8002874 <HAL_TIM_IC_CaptureCallback>
 8002560:	e005      	b.n	800256e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f97d 	bl	8002862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f98c 	bl	8002886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b08      	cmp	r3, #8
 8002580:	d122      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b08      	cmp	r3, #8
 800258e:	d11b      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0208 	mvn.w	r2, #8
 8002598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2204      	movs	r2, #4
 800259e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f960 	bl	8002874 <HAL_TIM_IC_CaptureCallback>
 80025b4:	e005      	b.n	80025c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f953 	bl	8002862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f962 	bl	8002886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	2b10      	cmp	r3, #16
 80025d4:	d122      	bne.n	800261c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b10      	cmp	r3, #16
 80025e2:	d11b      	bne.n	800261c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0210 	mvn.w	r2, #16
 80025ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2208      	movs	r2, #8
 80025f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f936 	bl	8002874 <HAL_TIM_IC_CaptureCallback>
 8002608:	e005      	b.n	8002616 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f929 	bl	8002862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f938 	bl	8002886 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b01      	cmp	r3, #1
 8002628:	d10e      	bne.n	8002648 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	d107      	bne.n	8002648 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f06f 0201 	mvn.w	r2, #1
 8002640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7fe fa5a 	bl	8000afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002652:	2b80      	cmp	r3, #128	; 0x80
 8002654:	d10e      	bne.n	8002674 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002660:	2b80      	cmp	r3, #128	; 0x80
 8002662:	d107      	bne.n	8002674 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800266c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 fa6b 	bl	8002b4a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267e:	2b40      	cmp	r3, #64	; 0x40
 8002680:	d10e      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268c:	2b40      	cmp	r3, #64	; 0x40
 800268e:	d107      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f8fc 	bl	8002898 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f003 0320 	and.w	r3, r3, #32
 80026aa:	2b20      	cmp	r3, #32
 80026ac:	d10e      	bne.n	80026cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	d107      	bne.n	80026cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0220 	mvn.w	r2, #32
 80026c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 fa36 	bl	8002b38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_TIM_ConfigClockSource+0x1c>
 80026ec:	2302      	movs	r3, #2
 80026ee:	e0b4      	b.n	800285a <HAL_TIM_ConfigClockSource+0x186>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2202      	movs	r2, #2
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800270e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002716:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002728:	d03e      	beq.n	80027a8 <HAL_TIM_ConfigClockSource+0xd4>
 800272a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800272e:	f200 8087 	bhi.w	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002736:	f000 8086 	beq.w	8002846 <HAL_TIM_ConfigClockSource+0x172>
 800273a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800273e:	d87f      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002740:	2b70      	cmp	r3, #112	; 0x70
 8002742:	d01a      	beq.n	800277a <HAL_TIM_ConfigClockSource+0xa6>
 8002744:	2b70      	cmp	r3, #112	; 0x70
 8002746:	d87b      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002748:	2b60      	cmp	r3, #96	; 0x60
 800274a:	d050      	beq.n	80027ee <HAL_TIM_ConfigClockSource+0x11a>
 800274c:	2b60      	cmp	r3, #96	; 0x60
 800274e:	d877      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002750:	2b50      	cmp	r3, #80	; 0x50
 8002752:	d03c      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0xfa>
 8002754:	2b50      	cmp	r3, #80	; 0x50
 8002756:	d873      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002758:	2b40      	cmp	r3, #64	; 0x40
 800275a:	d058      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x13a>
 800275c:	2b40      	cmp	r3, #64	; 0x40
 800275e:	d86f      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002760:	2b30      	cmp	r3, #48	; 0x30
 8002762:	d064      	beq.n	800282e <HAL_TIM_ConfigClockSource+0x15a>
 8002764:	2b30      	cmp	r3, #48	; 0x30
 8002766:	d86b      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002768:	2b20      	cmp	r3, #32
 800276a:	d060      	beq.n	800282e <HAL_TIM_ConfigClockSource+0x15a>
 800276c:	2b20      	cmp	r3, #32
 800276e:	d867      	bhi.n	8002840 <HAL_TIM_ConfigClockSource+0x16c>
 8002770:	2b00      	cmp	r3, #0
 8002772:	d05c      	beq.n	800282e <HAL_TIM_ConfigClockSource+0x15a>
 8002774:	2b10      	cmp	r3, #16
 8002776:	d05a      	beq.n	800282e <HAL_TIM_ConfigClockSource+0x15a>
 8002778:	e062      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800278a:	f000 f95e 	bl	8002a4a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800279c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	609a      	str	r2, [r3, #8]
      break;
 80027a6:	e04f      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027b8:	f000 f947 	bl	8002a4a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027ca:	609a      	str	r2, [r3, #8]
      break;
 80027cc:	e03c      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027da:	461a      	mov	r2, r3
 80027dc:	f000 f8be 	bl	800295c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2150      	movs	r1, #80	; 0x50
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f915 	bl	8002a16 <TIM_ITRx_SetConfig>
      break;
 80027ec:	e02c      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027fa:	461a      	mov	r2, r3
 80027fc:	f000 f8dc 	bl	80029b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2160      	movs	r1, #96	; 0x60
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f905 	bl	8002a16 <TIM_ITRx_SetConfig>
      break;
 800280c:	e01c      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800281a:	461a      	mov	r2, r3
 800281c:	f000 f89e 	bl	800295c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2140      	movs	r1, #64	; 0x40
 8002826:	4618      	mov	r0, r3
 8002828:	f000 f8f5 	bl	8002a16 <TIM_ITRx_SetConfig>
      break;
 800282c:	e00c      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4619      	mov	r1, r3
 8002838:	4610      	mov	r0, r2
 800283a:	f000 f8ec 	bl	8002a16 <TIM_ITRx_SetConfig>
      break;
 800283e:	e003      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
      break;
 8002844:	e000      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002846:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002858:	7bfb      	ldrb	r3, [r7, #15]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr

08002886 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr
	...

080028ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a25      	ldr	r2, [pc, #148]	; (8002954 <TIM_Base_SetConfig+0xa8>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d007      	beq.n	80028d4 <TIM_Base_SetConfig+0x28>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ca:	d003      	beq.n	80028d4 <TIM_Base_SetConfig+0x28>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a22      	ldr	r2, [pc, #136]	; (8002958 <TIM_Base_SetConfig+0xac>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d108      	bne.n	80028e6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a1a      	ldr	r2, [pc, #104]	; (8002954 <TIM_Base_SetConfig+0xa8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d007      	beq.n	80028fe <TIM_Base_SetConfig+0x52>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f4:	d003      	beq.n	80028fe <TIM_Base_SetConfig+0x52>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a17      	ldr	r2, [pc, #92]	; (8002958 <TIM_Base_SetConfig+0xac>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d108      	bne.n	8002910 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4313      	orrs	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	4313      	orrs	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a07      	ldr	r2, [pc, #28]	; (8002954 <TIM_Base_SetConfig+0xa8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d103      	bne.n	8002944 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	615a      	str	r2, [r3, #20]
}
 800294a:	bf00      	nop
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr
 8002954:	40012c00 	.word	0x40012c00
 8002958:	40000400 	.word	0x40000400

0800295c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	f023 0201 	bic.w	r2, r3, #1
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f023 030a 	bic.w	r3, r3, #10
 8002998:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4313      	orrs	r3, r2
 80029a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	621a      	str	r2, [r3, #32]
}
 80029ae:	bf00      	nop
 80029b0:	371c      	adds	r7, #28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	f023 0210 	bic.w	r2, r3, #16
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	031b      	lsls	r3, r3, #12
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	621a      	str	r2, [r3, #32]
}
 8002a0c:	bf00      	nop
 8002a0e:	371c      	adds	r7, #28
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr

08002a16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b085      	sub	sp, #20
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f043 0307 	orr.w	r3, r3, #7
 8002a38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	609a      	str	r2, [r3, #8]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b087      	sub	sp, #28
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a64:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	021a      	lsls	r2, r3, #8
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	609a      	str	r2, [r3, #8]
}
 8002a7e:	bf00      	nop
 8002a80:	371c      	adds	r7, #28
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e041      	b.n	8002b24 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d009      	beq.n	8002af8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aec:	d004      	beq.n	8002af8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a10      	ldr	r2, [pc, #64]	; (8002b34 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d10c      	bne.n	8002b12 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002afe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40012c00 	.word	0x40012c00
 8002b34:	40000400 	.word	0x40000400

08002b38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr

08002b4a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr

08002b5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e042      	b.n	8002bf4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d106      	bne.n	8002b88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7fe f86a 	bl	8000c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2224      	movs	r2, #36	; 0x24
 8002b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 fdc5 	bl	8003730 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695a      	ldr	r2, [r3, #20]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08a      	sub	sp, #40	; 0x28
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	d16d      	bne.n	8002cf8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <HAL_UART_Transmit+0x2c>
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e066      	b.n	8002cfa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2221      	movs	r2, #33	; 0x21
 8002c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c3a:	f7fe f957 	bl	8000eec <HAL_GetTick>
 8002c3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	88fa      	ldrh	r2, [r7, #6]
 8002c44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	88fa      	ldrh	r2, [r7, #6]
 8002c4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c54:	d108      	bne.n	8002c68 <HAL_UART_Transmit+0x6c>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d104      	bne.n	8002c68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	e003      	b.n	8002c70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c70:	e02a      	b.n	8002cc8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2180      	movs	r1, #128	; 0x80
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 fb14 	bl	80032aa <UART_WaitOnFlagUntilTimeout>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e036      	b.n	8002cfa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10b      	bne.n	8002caa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ca0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	61bb      	str	r3, [r7, #24]
 8002ca8:	e007      	b.n	8002cba <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	781a      	ldrb	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1cf      	bne.n	8002c72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2140      	movs	r1, #64	; 0x40
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 fae4 	bl	80032aa <UART_WaitOnFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e006      	b.n	8002cfa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e000      	b.n	8002cfa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002cf8:	2302      	movs	r3, #2
  }
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3720      	adds	r7, #32
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b084      	sub	sp, #16
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b20      	cmp	r3, #32
 8002d1a:	d112      	bne.n	8002d42 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <HAL_UART_Receive_IT+0x26>
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e00b      	b.n	8002d44 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	461a      	mov	r2, r3
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 fb24 	bl	8003386 <UART_Start_Receive_IT>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	e000      	b.n	8002d44 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002d42:	2302      	movs	r3, #2
  }
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b0ba      	sub	sp, #232	; 0xe8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002d8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10f      	bne.n	8002db2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d96:	f003 0320 	and.w	r3, r3, #32
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d009      	beq.n	8002db2 <HAL_UART_IRQHandler+0x66>
 8002d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fc01 	bl	80035b2 <UART_Receive_IT>
      return;
 8002db0:	e25b      	b.n	800326a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002db2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 80de 	beq.w	8002f78 <HAL_UART_IRQHandler+0x22c>
 8002dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d106      	bne.n	8002dd6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dcc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80d1 	beq.w	8002f78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00b      	beq.n	8002dfa <HAL_UART_IRQHandler+0xae>
 8002de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	f043 0201 	orr.w	r2, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00b      	beq.n	8002e1e <HAL_UART_IRQHandler+0xd2>
 8002e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	f043 0202 	orr.w	r2, r3, #2
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <HAL_UART_IRQHandler+0xf6>
 8002e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	f043 0204 	orr.w	r2, r3, #4
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d011      	beq.n	8002e72 <HAL_UART_IRQHandler+0x126>
 8002e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e52:	f003 0320 	and.w	r3, r3, #32
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d105      	bne.n	8002e66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d005      	beq.n	8002e72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	f043 0208 	orr.w	r2, r3, #8
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 81f2 	beq.w	8003260 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_UART_IRQHandler+0x14e>
 8002e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 fb8c 	bl	80035b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf14      	ite	ne
 8002ea8:	2301      	movne	r3, #1
 8002eaa:	2300      	moveq	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <HAL_UART_IRQHandler+0x17a>
 8002ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d04f      	beq.n	8002f66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fa96 	bl	80033f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d041      	beq.n	8002f5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3314      	adds	r3, #20
 8002ee0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ee8:	e853 3f00 	ldrex	r3, [r3]
 8002eec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3314      	adds	r3, #20
 8002f02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f16:	e841 2300 	strex	r3, r2, [r1]
 8002f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1d9      	bne.n	8002eda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d013      	beq.n	8002f56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f32:	4a7e      	ldr	r2, [pc, #504]	; (800312c <HAL_UART_IRQHandler+0x3e0>)
 8002f34:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe fb3a 	bl	80015b4 <HAL_DMA_Abort_IT>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d016      	beq.n	8002f74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f50:	4610      	mov	r0, r2
 8002f52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f54:	e00e      	b.n	8002f74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f993 	bl	8003282 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f5c:	e00a      	b.n	8002f74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f98f 	bl	8003282 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f64:	e006      	b.n	8002f74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f98b 	bl	8003282 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002f72:	e175      	b.n	8003260 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f74:	bf00      	nop
    return;
 8002f76:	e173      	b.n	8003260 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	f040 814f 	bne.w	8003220 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 8148 	beq.w	8003220 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 8141 	beq.w	8003220 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 80b6 	beq.w	8003130 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 8145 	beq.w	8003264 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	f080 813e 	bcs.w	8003264 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	f000 8088 	beq.w	800310c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	330c      	adds	r3, #12
 8003002:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003006:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800300a:	e853 3f00 	ldrex	r3, [r3]
 800300e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003012:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003016:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800301a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	330c      	adds	r3, #12
 8003024:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003028:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800302c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003030:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003034:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003038:	e841 2300 	strex	r3, r2, [r1]
 800303c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003040:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1d9      	bne.n	8002ffc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3314      	adds	r3, #20
 800304e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003050:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003052:	e853 3f00 	ldrex	r3, [r3]
 8003056:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003058:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800305a:	f023 0301 	bic.w	r3, r3, #1
 800305e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	3314      	adds	r3, #20
 8003068:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800306c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003070:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003072:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003074:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003078:	e841 2300 	strex	r3, r2, [r1]
 800307c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800307e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e1      	bne.n	8003048 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3314      	adds	r3, #20
 800308a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800308e:	e853 3f00 	ldrex	r3, [r3]
 8003092:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003094:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800309a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	3314      	adds	r3, #20
 80030a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80030a8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80030ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030b0:	e841 2300 	strex	r3, r2, [r1]
 80030b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80030b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1e3      	bne.n	8003084 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	330c      	adds	r3, #12
 80030d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d4:	e853 3f00 	ldrex	r3, [r3]
 80030d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80030da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030dc:	f023 0310 	bic.w	r3, r3, #16
 80030e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	330c      	adds	r3, #12
 80030ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80030ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80030f0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030f6:	e841 2300 	strex	r3, r2, [r1]
 80030fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80030fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1e3      	bne.n	80030ca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003106:	4618      	mov	r0, r3
 8003108:	f7fe fa19 	bl	800153e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800311a:	b29b      	uxth	r3, r3
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	b29b      	uxth	r3, r3
 8003120:	4619      	mov	r1, r3
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f8b6 	bl	8003294 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003128:	e09c      	b.n	8003264 <HAL_UART_IRQHandler+0x518>
 800312a:	bf00      	nop
 800312c:	080034bd 	.word	0x080034bd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003138:	b29b      	uxth	r3, r3
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 808e 	beq.w	8003268 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800314c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 8089 	beq.w	8003268 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	330c      	adds	r3, #12
 800315c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003160:	e853 3f00 	ldrex	r3, [r3]
 8003164:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003168:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800316c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	330c      	adds	r3, #12
 8003176:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800317a:	647a      	str	r2, [r7, #68]	; 0x44
 800317c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003180:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003182:	e841 2300 	strex	r3, r2, [r1]
 8003186:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1e3      	bne.n	8003156 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	3314      	adds	r3, #20
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	e853 3f00 	ldrex	r3, [r3]
 800319c:	623b      	str	r3, [r7, #32]
   return(result);
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	f023 0301 	bic.w	r3, r3, #1
 80031a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	3314      	adds	r3, #20
 80031ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031b2:	633a      	str	r2, [r7, #48]	; 0x30
 80031b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ba:	e841 2300 	strex	r3, r2, [r1]
 80031be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1e3      	bne.n	800318e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	330c      	adds	r3, #12
 80031da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	e853 3f00 	ldrex	r3, [r3]
 80031e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f023 0310 	bic.w	r3, r3, #16
 80031ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	330c      	adds	r3, #12
 80031f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80031f8:	61fa      	str	r2, [r7, #28]
 80031fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fc:	69b9      	ldr	r1, [r7, #24]
 80031fe:	69fa      	ldr	r2, [r7, #28]
 8003200:	e841 2300 	strex	r3, r2, [r1]
 8003204:	617b      	str	r3, [r7, #20]
   return(result);
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1e3      	bne.n	80031d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003212:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003216:	4619      	mov	r1, r3
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f83b 	bl	8003294 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800321e:	e023      	b.n	8003268 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003228:	2b00      	cmp	r3, #0
 800322a:	d009      	beq.n	8003240 <HAL_UART_IRQHandler+0x4f4>
 800322c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f953 	bl	80034e4 <UART_Transmit_IT>
    return;
 800323e:	e014      	b.n	800326a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00e      	beq.n	800326a <HAL_UART_IRQHandler+0x51e>
 800324c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f992 	bl	8003582 <UART_EndTransmit_IT>
    return;
 800325e:	e004      	b.n	800326a <HAL_UART_IRQHandler+0x51e>
    return;
 8003260:	bf00      	nop
 8003262:	e002      	b.n	800326a <HAL_UART_IRQHandler+0x51e>
      return;
 8003264:	bf00      	nop
 8003266:	e000      	b.n	800326a <HAL_UART_IRQHandler+0x51e>
      return;
 8003268:	bf00      	nop
  }
}
 800326a:	37e8      	adds	r7, #232	; 0xe8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr

08003282 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr

08003294 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	460b      	mov	r3, r1
 800329e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bc80      	pop	{r7}
 80032a8:	4770      	bx	lr

080032aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b090      	sub	sp, #64	; 0x40
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	603b      	str	r3, [r7, #0]
 80032b6:	4613      	mov	r3, r2
 80032b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ba:	e050      	b.n	800335e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032c2:	d04c      	beq.n	800335e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <UART_WaitOnFlagUntilTimeout+0x30>
 80032ca:	f7fd fe0f 	bl	8000eec <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d241      	bcs.n	800335e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	330c      	adds	r3, #12
 80032e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e4:	e853 3f00 	ldrex	r3, [r3]
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	330c      	adds	r3, #12
 80032f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032fa:	637a      	str	r2, [r7, #52]	; 0x34
 80032fc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003300:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003302:	e841 2300 	strex	r3, r2, [r1]
 8003306:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1e5      	bne.n	80032da <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	3314      	adds	r3, #20
 8003314:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	e853 3f00 	ldrex	r3, [r3]
 800331c:	613b      	str	r3, [r7, #16]
   return(result);
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f023 0301 	bic.w	r3, r3, #1
 8003324:	63bb      	str	r3, [r7, #56]	; 0x38
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3314      	adds	r3, #20
 800332c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800332e:	623a      	str	r2, [r7, #32]
 8003330:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003332:	69f9      	ldr	r1, [r7, #28]
 8003334:	6a3a      	ldr	r2, [r7, #32]
 8003336:	e841 2300 	strex	r3, r2, [r1]
 800333a:	61bb      	str	r3, [r7, #24]
   return(result);
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1e5      	bne.n	800330e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2220      	movs	r2, #32
 8003346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e00f      	b.n	800337e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	4013      	ands	r3, r2
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	429a      	cmp	r2, r3
 800336c:	bf0c      	ite	eq
 800336e:	2301      	moveq	r3, #1
 8003370:	2300      	movne	r3, #0
 8003372:	b2db      	uxtb	r3, r3
 8003374:	461a      	mov	r2, r3
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	429a      	cmp	r2, r3
 800337a:	d09f      	beq.n	80032bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3740      	adds	r7, #64	; 0x40
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003386:	b480      	push	{r7}
 8003388:	b085      	sub	sp, #20
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	4613      	mov	r3, r2
 8003392:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	88fa      	ldrh	r2, [r7, #6]
 800339e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	88fa      	ldrh	r2, [r7, #6]
 80033a4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2222      	movs	r2, #34	; 0x22
 80033b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d007      	beq.n	80033cc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ca:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695a      	ldr	r2, [r3, #20]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0220 	orr.w	r2, r2, #32
 80033ea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr

080033f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b095      	sub	sp, #84	; 0x54
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	330c      	adds	r3, #12
 8003406:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800340a:	e853 3f00 	ldrex	r3, [r3]
 800340e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003412:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	330c      	adds	r3, #12
 800341e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003420:	643a      	str	r2, [r7, #64]	; 0x40
 8003422:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003424:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003426:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003428:	e841 2300 	strex	r3, r2, [r1]
 800342c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800342e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1e5      	bne.n	8003400 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3314      	adds	r3, #20
 800343a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	e853 3f00 	ldrex	r3, [r3]
 8003442:	61fb      	str	r3, [r7, #28]
   return(result);
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f023 0301 	bic.w	r3, r3, #1
 800344a:	64bb      	str	r3, [r7, #72]	; 0x48
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	3314      	adds	r3, #20
 8003452:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003454:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003456:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003458:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800345a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800345c:	e841 2300 	strex	r3, r2, [r1]
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1e5      	bne.n	8003434 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	2b01      	cmp	r3, #1
 800346e:	d119      	bne.n	80034a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	330c      	adds	r3, #12
 8003476:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	e853 3f00 	ldrex	r3, [r3]
 800347e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f023 0310 	bic.w	r3, r3, #16
 8003486:	647b      	str	r3, [r7, #68]	; 0x44
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	330c      	adds	r3, #12
 800348e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003490:	61ba      	str	r2, [r7, #24]
 8003492:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003494:	6979      	ldr	r1, [r7, #20]
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	e841 2300 	strex	r3, r2, [r1]
 800349c:	613b      	str	r3, [r7, #16]
   return(result);
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1e5      	bne.n	8003470 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80034b2:	bf00      	nop
 80034b4:	3754      	adds	r7, #84	; 0x54
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr

080034bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f7ff fed3 	bl	8003282 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034dc:	bf00      	nop
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b21      	cmp	r3, #33	; 0x21
 80034f6:	d13e      	bne.n	8003576 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003500:	d114      	bne.n	800352c <UART_Transmit_IT+0x48>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d110      	bne.n	800352c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	461a      	mov	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800351e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	1c9a      	adds	r2, r3, #2
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	621a      	str	r2, [r3, #32]
 800352a:	e008      	b.n	800353e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	1c59      	adds	r1, r3, #1
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6211      	str	r1, [r2, #32]
 8003536:	781a      	ldrb	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003542:	b29b      	uxth	r3, r3
 8003544:	3b01      	subs	r3, #1
 8003546:	b29b      	uxth	r3, r3
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	4619      	mov	r1, r3
 800354c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10f      	bne.n	8003572 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003560:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003570:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	e000      	b.n	8003578 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003576:	2302      	movs	r3, #2
  }
}
 8003578:	4618      	mov	r0, r3
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr

08003582 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003598:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff fe64 	bl	8003270 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b08c      	sub	sp, #48	; 0x30
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b22      	cmp	r3, #34	; 0x22
 80035c4:	f040 80ae 	bne.w	8003724 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d0:	d117      	bne.n	8003602 <UART_Receive_IT+0x50>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d113      	bne.n	8003602 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fa:	1c9a      	adds	r2, r3, #2
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003600:	e026      	b.n	8003650 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003606:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003608:	2300      	movs	r3, #0
 800360a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003614:	d007      	beq.n	8003626 <UART_Receive_IT+0x74>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10a      	bne.n	8003634 <UART_Receive_IT+0x82>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	b2da      	uxtb	r2, r3
 800362e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003630:	701a      	strb	r2, [r3, #0]
 8003632:	e008      	b.n	8003646 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003640:	b2da      	uxtb	r2, r3
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29b      	uxth	r3, r3
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	4619      	mov	r1, r3
 800365e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003660:	2b00      	cmp	r3, #0
 8003662:	d15d      	bne.n	8003720 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0220 	bic.w	r2, r2, #32
 8003672:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003682:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695a      	ldr	r2, [r3, #20]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0201 	bic.w	r2, r2, #1
 8003692:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d135      	bne.n	8003716 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	330c      	adds	r3, #12
 80036b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	e853 3f00 	ldrex	r3, [r3]
 80036be:	613b      	str	r3, [r7, #16]
   return(result);
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f023 0310 	bic.w	r3, r3, #16
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	330c      	adds	r3, #12
 80036ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d0:	623a      	str	r2, [r7, #32]
 80036d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d4:	69f9      	ldr	r1, [r7, #28]
 80036d6:	6a3a      	ldr	r2, [r7, #32]
 80036d8:	e841 2300 	strex	r3, r2, [r1]
 80036dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1e5      	bne.n	80036b0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0310 	and.w	r3, r3, #16
 80036ee:	2b10      	cmp	r3, #16
 80036f0:	d10a      	bne.n	8003708 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800370c:	4619      	mov	r1, r3
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7ff fdc0 	bl	8003294 <HAL_UARTEx_RxEventCallback>
 8003714:	e002      	b.n	800371c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fd f9fa 	bl	8000b10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	e002      	b.n	8003726 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	e000      	b.n	8003726 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003724:	2302      	movs	r3, #2
  }
}
 8003726:	4618      	mov	r0, r3
 8003728:	3730      	adds	r7, #48	; 0x30
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800376a:	f023 030c 	bic.w	r3, r3, #12
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6812      	ldr	r2, [r2, #0]
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	430b      	orrs	r3, r1
 8003776:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699a      	ldr	r2, [r3, #24]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a2c      	ldr	r2, [pc, #176]	; (8003844 <UART_SetConfig+0x114>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d103      	bne.n	80037a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003798:	f7fe fd10 	bl	80021bc <HAL_RCC_GetPCLK2Freq>
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	e002      	b.n	80037a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037a0:	f7fe fcf8 	bl	8002194 <HAL_RCC_GetPCLK1Freq>
 80037a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	009a      	lsls	r2, r3, #2
 80037b0:	441a      	add	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037bc:	4a22      	ldr	r2, [pc, #136]	; (8003848 <UART_SetConfig+0x118>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	0119      	lsls	r1, r3, #4
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	009a      	lsls	r2, r3, #2
 80037d0:	441a      	add	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037dc:	4b1a      	ldr	r3, [pc, #104]	; (8003848 <UART_SetConfig+0x118>)
 80037de:	fba3 0302 	umull	r0, r3, r3, r2
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	2064      	movs	r0, #100	; 0x64
 80037e6:	fb00 f303 	mul.w	r3, r0, r3
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	3332      	adds	r3, #50	; 0x32
 80037f0:	4a15      	ldr	r2, [pc, #84]	; (8003848 <UART_SetConfig+0x118>)
 80037f2:	fba2 2303 	umull	r2, r3, r2, r3
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037fc:	4419      	add	r1, r3
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	009a      	lsls	r2, r3, #2
 8003808:	441a      	add	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	fbb2 f2f3 	udiv	r2, r2, r3
 8003814:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <UART_SetConfig+0x118>)
 8003816:	fba3 0302 	umull	r0, r3, r3, r2
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	2064      	movs	r0, #100	; 0x64
 800381e:	fb00 f303 	mul.w	r3, r0, r3
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	3332      	adds	r3, #50	; 0x32
 8003828:	4a07      	ldr	r2, [pc, #28]	; (8003848 <UART_SetConfig+0x118>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	f003 020f 	and.w	r2, r3, #15
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	440a      	add	r2, r1
 800383a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800383c:	bf00      	nop
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40013800 	.word	0x40013800
 8003848:	51eb851f 	.word	0x51eb851f

0800384c <siprintf>:
 800384c:	b40e      	push	{r1, r2, r3}
 800384e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003852:	b500      	push	{lr}
 8003854:	b09c      	sub	sp, #112	; 0x70
 8003856:	ab1d      	add	r3, sp, #116	; 0x74
 8003858:	9002      	str	r0, [sp, #8]
 800385a:	9006      	str	r0, [sp, #24]
 800385c:	9107      	str	r1, [sp, #28]
 800385e:	9104      	str	r1, [sp, #16]
 8003860:	4808      	ldr	r0, [pc, #32]	; (8003884 <siprintf+0x38>)
 8003862:	4909      	ldr	r1, [pc, #36]	; (8003888 <siprintf+0x3c>)
 8003864:	f853 2b04 	ldr.w	r2, [r3], #4
 8003868:	9105      	str	r1, [sp, #20]
 800386a:	6800      	ldr	r0, [r0, #0]
 800386c:	a902      	add	r1, sp, #8
 800386e:	9301      	str	r3, [sp, #4]
 8003870:	f000 f89a 	bl	80039a8 <_svfiprintf_r>
 8003874:	2200      	movs	r2, #0
 8003876:	9b02      	ldr	r3, [sp, #8]
 8003878:	701a      	strb	r2, [r3, #0]
 800387a:	b01c      	add	sp, #112	; 0x70
 800387c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003880:	b003      	add	sp, #12
 8003882:	4770      	bx	lr
 8003884:	20000058 	.word	0x20000058
 8003888:	ffff0208 	.word	0xffff0208

0800388c <memset>:
 800388c:	4603      	mov	r3, r0
 800388e:	4402      	add	r2, r0
 8003890:	4293      	cmp	r3, r2
 8003892:	d100      	bne.n	8003896 <memset+0xa>
 8003894:	4770      	bx	lr
 8003896:	f803 1b01 	strb.w	r1, [r3], #1
 800389a:	e7f9      	b.n	8003890 <memset+0x4>

0800389c <__errno>:
 800389c:	4b01      	ldr	r3, [pc, #4]	; (80038a4 <__errno+0x8>)
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	20000058 	.word	0x20000058

080038a8 <__libc_init_array>:
 80038a8:	b570      	push	{r4, r5, r6, lr}
 80038aa:	2600      	movs	r6, #0
 80038ac:	4d0c      	ldr	r5, [pc, #48]	; (80038e0 <__libc_init_array+0x38>)
 80038ae:	4c0d      	ldr	r4, [pc, #52]	; (80038e4 <__libc_init_array+0x3c>)
 80038b0:	1b64      	subs	r4, r4, r5
 80038b2:	10a4      	asrs	r4, r4, #2
 80038b4:	42a6      	cmp	r6, r4
 80038b6:	d109      	bne.n	80038cc <__libc_init_array+0x24>
 80038b8:	f000 fc7a 	bl	80041b0 <_init>
 80038bc:	2600      	movs	r6, #0
 80038be:	4d0a      	ldr	r5, [pc, #40]	; (80038e8 <__libc_init_array+0x40>)
 80038c0:	4c0a      	ldr	r4, [pc, #40]	; (80038ec <__libc_init_array+0x44>)
 80038c2:	1b64      	subs	r4, r4, r5
 80038c4:	10a4      	asrs	r4, r4, #2
 80038c6:	42a6      	cmp	r6, r4
 80038c8:	d105      	bne.n	80038d6 <__libc_init_array+0x2e>
 80038ca:	bd70      	pop	{r4, r5, r6, pc}
 80038cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80038d0:	4798      	blx	r3
 80038d2:	3601      	adds	r6, #1
 80038d4:	e7ee      	b.n	80038b4 <__libc_init_array+0xc>
 80038d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038da:	4798      	blx	r3
 80038dc:	3601      	adds	r6, #1
 80038de:	e7f2      	b.n	80038c6 <__libc_init_array+0x1e>
 80038e0:	08004238 	.word	0x08004238
 80038e4:	08004238 	.word	0x08004238
 80038e8:	08004238 	.word	0x08004238
 80038ec:	0800423c 	.word	0x0800423c

080038f0 <__retarget_lock_acquire_recursive>:
 80038f0:	4770      	bx	lr

080038f2 <__retarget_lock_release_recursive>:
 80038f2:	4770      	bx	lr

080038f4 <__ssputs_r>:
 80038f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038f8:	461f      	mov	r7, r3
 80038fa:	688e      	ldr	r6, [r1, #8]
 80038fc:	4682      	mov	sl, r0
 80038fe:	42be      	cmp	r6, r7
 8003900:	460c      	mov	r4, r1
 8003902:	4690      	mov	r8, r2
 8003904:	680b      	ldr	r3, [r1, #0]
 8003906:	d82c      	bhi.n	8003962 <__ssputs_r+0x6e>
 8003908:	898a      	ldrh	r2, [r1, #12]
 800390a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800390e:	d026      	beq.n	800395e <__ssputs_r+0x6a>
 8003910:	6965      	ldr	r5, [r4, #20]
 8003912:	6909      	ldr	r1, [r1, #16]
 8003914:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003918:	eba3 0901 	sub.w	r9, r3, r1
 800391c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003920:	1c7b      	adds	r3, r7, #1
 8003922:	444b      	add	r3, r9
 8003924:	106d      	asrs	r5, r5, #1
 8003926:	429d      	cmp	r5, r3
 8003928:	bf38      	it	cc
 800392a:	461d      	movcc	r5, r3
 800392c:	0553      	lsls	r3, r2, #21
 800392e:	d527      	bpl.n	8003980 <__ssputs_r+0x8c>
 8003930:	4629      	mov	r1, r5
 8003932:	f000 f957 	bl	8003be4 <_malloc_r>
 8003936:	4606      	mov	r6, r0
 8003938:	b360      	cbz	r0, 8003994 <__ssputs_r+0xa0>
 800393a:	464a      	mov	r2, r9
 800393c:	6921      	ldr	r1, [r4, #16]
 800393e:	f000 fbd9 	bl	80040f4 <memcpy>
 8003942:	89a3      	ldrh	r3, [r4, #12]
 8003944:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800394c:	81a3      	strh	r3, [r4, #12]
 800394e:	6126      	str	r6, [r4, #16]
 8003950:	444e      	add	r6, r9
 8003952:	6026      	str	r6, [r4, #0]
 8003954:	463e      	mov	r6, r7
 8003956:	6165      	str	r5, [r4, #20]
 8003958:	eba5 0509 	sub.w	r5, r5, r9
 800395c:	60a5      	str	r5, [r4, #8]
 800395e:	42be      	cmp	r6, r7
 8003960:	d900      	bls.n	8003964 <__ssputs_r+0x70>
 8003962:	463e      	mov	r6, r7
 8003964:	4632      	mov	r2, r6
 8003966:	4641      	mov	r1, r8
 8003968:	6820      	ldr	r0, [r4, #0]
 800396a:	f000 fb8a 	bl	8004082 <memmove>
 800396e:	2000      	movs	r0, #0
 8003970:	68a3      	ldr	r3, [r4, #8]
 8003972:	1b9b      	subs	r3, r3, r6
 8003974:	60a3      	str	r3, [r4, #8]
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	4433      	add	r3, r6
 800397a:	6023      	str	r3, [r4, #0]
 800397c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003980:	462a      	mov	r2, r5
 8003982:	f000 fb4f 	bl	8004024 <_realloc_r>
 8003986:	4606      	mov	r6, r0
 8003988:	2800      	cmp	r0, #0
 800398a:	d1e0      	bne.n	800394e <__ssputs_r+0x5a>
 800398c:	4650      	mov	r0, sl
 800398e:	6921      	ldr	r1, [r4, #16]
 8003990:	f000 fbbe 	bl	8004110 <_free_r>
 8003994:	230c      	movs	r3, #12
 8003996:	f8ca 3000 	str.w	r3, [sl]
 800399a:	89a3      	ldrh	r3, [r4, #12]
 800399c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039a4:	81a3      	strh	r3, [r4, #12]
 80039a6:	e7e9      	b.n	800397c <__ssputs_r+0x88>

080039a8 <_svfiprintf_r>:
 80039a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ac:	4698      	mov	r8, r3
 80039ae:	898b      	ldrh	r3, [r1, #12]
 80039b0:	4607      	mov	r7, r0
 80039b2:	061b      	lsls	r3, r3, #24
 80039b4:	460d      	mov	r5, r1
 80039b6:	4614      	mov	r4, r2
 80039b8:	b09d      	sub	sp, #116	; 0x74
 80039ba:	d50e      	bpl.n	80039da <_svfiprintf_r+0x32>
 80039bc:	690b      	ldr	r3, [r1, #16]
 80039be:	b963      	cbnz	r3, 80039da <_svfiprintf_r+0x32>
 80039c0:	2140      	movs	r1, #64	; 0x40
 80039c2:	f000 f90f 	bl	8003be4 <_malloc_r>
 80039c6:	6028      	str	r0, [r5, #0]
 80039c8:	6128      	str	r0, [r5, #16]
 80039ca:	b920      	cbnz	r0, 80039d6 <_svfiprintf_r+0x2e>
 80039cc:	230c      	movs	r3, #12
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039d4:	e0d0      	b.n	8003b78 <_svfiprintf_r+0x1d0>
 80039d6:	2340      	movs	r3, #64	; 0x40
 80039d8:	616b      	str	r3, [r5, #20]
 80039da:	2300      	movs	r3, #0
 80039dc:	9309      	str	r3, [sp, #36]	; 0x24
 80039de:	2320      	movs	r3, #32
 80039e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039e4:	2330      	movs	r3, #48	; 0x30
 80039e6:	f04f 0901 	mov.w	r9, #1
 80039ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80039ee:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003b90 <_svfiprintf_r+0x1e8>
 80039f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039f6:	4623      	mov	r3, r4
 80039f8:	469a      	mov	sl, r3
 80039fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039fe:	b10a      	cbz	r2, 8003a04 <_svfiprintf_r+0x5c>
 8003a00:	2a25      	cmp	r2, #37	; 0x25
 8003a02:	d1f9      	bne.n	80039f8 <_svfiprintf_r+0x50>
 8003a04:	ebba 0b04 	subs.w	fp, sl, r4
 8003a08:	d00b      	beq.n	8003a22 <_svfiprintf_r+0x7a>
 8003a0a:	465b      	mov	r3, fp
 8003a0c:	4622      	mov	r2, r4
 8003a0e:	4629      	mov	r1, r5
 8003a10:	4638      	mov	r0, r7
 8003a12:	f7ff ff6f 	bl	80038f4 <__ssputs_r>
 8003a16:	3001      	adds	r0, #1
 8003a18:	f000 80a9 	beq.w	8003b6e <_svfiprintf_r+0x1c6>
 8003a1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a1e:	445a      	add	r2, fp
 8003a20:	9209      	str	r2, [sp, #36]	; 0x24
 8003a22:	f89a 3000 	ldrb.w	r3, [sl]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 80a1 	beq.w	8003b6e <_svfiprintf_r+0x1c6>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a36:	f10a 0a01 	add.w	sl, sl, #1
 8003a3a:	9304      	str	r3, [sp, #16]
 8003a3c:	9307      	str	r3, [sp, #28]
 8003a3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a42:	931a      	str	r3, [sp, #104]	; 0x68
 8003a44:	4654      	mov	r4, sl
 8003a46:	2205      	movs	r2, #5
 8003a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a4c:	4850      	ldr	r0, [pc, #320]	; (8003b90 <_svfiprintf_r+0x1e8>)
 8003a4e:	f000 fb43 	bl	80040d8 <memchr>
 8003a52:	9a04      	ldr	r2, [sp, #16]
 8003a54:	b9d8      	cbnz	r0, 8003a8e <_svfiprintf_r+0xe6>
 8003a56:	06d0      	lsls	r0, r2, #27
 8003a58:	bf44      	itt	mi
 8003a5a:	2320      	movmi	r3, #32
 8003a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a60:	0711      	lsls	r1, r2, #28
 8003a62:	bf44      	itt	mi
 8003a64:	232b      	movmi	r3, #43	; 0x2b
 8003a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a6e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a70:	d015      	beq.n	8003a9e <_svfiprintf_r+0xf6>
 8003a72:	4654      	mov	r4, sl
 8003a74:	2000      	movs	r0, #0
 8003a76:	f04f 0c0a 	mov.w	ip, #10
 8003a7a:	9a07      	ldr	r2, [sp, #28]
 8003a7c:	4621      	mov	r1, r4
 8003a7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a82:	3b30      	subs	r3, #48	; 0x30
 8003a84:	2b09      	cmp	r3, #9
 8003a86:	d94d      	bls.n	8003b24 <_svfiprintf_r+0x17c>
 8003a88:	b1b0      	cbz	r0, 8003ab8 <_svfiprintf_r+0x110>
 8003a8a:	9207      	str	r2, [sp, #28]
 8003a8c:	e014      	b.n	8003ab8 <_svfiprintf_r+0x110>
 8003a8e:	eba0 0308 	sub.w	r3, r0, r8
 8003a92:	fa09 f303 	lsl.w	r3, r9, r3
 8003a96:	4313      	orrs	r3, r2
 8003a98:	46a2      	mov	sl, r4
 8003a9a:	9304      	str	r3, [sp, #16]
 8003a9c:	e7d2      	b.n	8003a44 <_svfiprintf_r+0x9c>
 8003a9e:	9b03      	ldr	r3, [sp, #12]
 8003aa0:	1d19      	adds	r1, r3, #4
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	9103      	str	r1, [sp, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	bfbb      	ittet	lt
 8003aaa:	425b      	neglt	r3, r3
 8003aac:	f042 0202 	orrlt.w	r2, r2, #2
 8003ab0:	9307      	strge	r3, [sp, #28]
 8003ab2:	9307      	strlt	r3, [sp, #28]
 8003ab4:	bfb8      	it	lt
 8003ab6:	9204      	strlt	r2, [sp, #16]
 8003ab8:	7823      	ldrb	r3, [r4, #0]
 8003aba:	2b2e      	cmp	r3, #46	; 0x2e
 8003abc:	d10c      	bne.n	8003ad8 <_svfiprintf_r+0x130>
 8003abe:	7863      	ldrb	r3, [r4, #1]
 8003ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ac2:	d134      	bne.n	8003b2e <_svfiprintf_r+0x186>
 8003ac4:	9b03      	ldr	r3, [sp, #12]
 8003ac6:	3402      	adds	r4, #2
 8003ac8:	1d1a      	adds	r2, r3, #4
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	9203      	str	r2, [sp, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bfb8      	it	lt
 8003ad2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003ad6:	9305      	str	r3, [sp, #20]
 8003ad8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003b94 <_svfiprintf_r+0x1ec>
 8003adc:	2203      	movs	r2, #3
 8003ade:	4650      	mov	r0, sl
 8003ae0:	7821      	ldrb	r1, [r4, #0]
 8003ae2:	f000 faf9 	bl	80040d8 <memchr>
 8003ae6:	b138      	cbz	r0, 8003af8 <_svfiprintf_r+0x150>
 8003ae8:	2240      	movs	r2, #64	; 0x40
 8003aea:	9b04      	ldr	r3, [sp, #16]
 8003aec:	eba0 000a 	sub.w	r0, r0, sl
 8003af0:	4082      	lsls	r2, r0
 8003af2:	4313      	orrs	r3, r2
 8003af4:	3401      	adds	r4, #1
 8003af6:	9304      	str	r3, [sp, #16]
 8003af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003afc:	2206      	movs	r2, #6
 8003afe:	4826      	ldr	r0, [pc, #152]	; (8003b98 <_svfiprintf_r+0x1f0>)
 8003b00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b04:	f000 fae8 	bl	80040d8 <memchr>
 8003b08:	2800      	cmp	r0, #0
 8003b0a:	d038      	beq.n	8003b7e <_svfiprintf_r+0x1d6>
 8003b0c:	4b23      	ldr	r3, [pc, #140]	; (8003b9c <_svfiprintf_r+0x1f4>)
 8003b0e:	bb1b      	cbnz	r3, 8003b58 <_svfiprintf_r+0x1b0>
 8003b10:	9b03      	ldr	r3, [sp, #12]
 8003b12:	3307      	adds	r3, #7
 8003b14:	f023 0307 	bic.w	r3, r3, #7
 8003b18:	3308      	adds	r3, #8
 8003b1a:	9303      	str	r3, [sp, #12]
 8003b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b1e:	4433      	add	r3, r6
 8003b20:	9309      	str	r3, [sp, #36]	; 0x24
 8003b22:	e768      	b.n	80039f6 <_svfiprintf_r+0x4e>
 8003b24:	460c      	mov	r4, r1
 8003b26:	2001      	movs	r0, #1
 8003b28:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b2c:	e7a6      	b.n	8003a7c <_svfiprintf_r+0xd4>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f04f 0c0a 	mov.w	ip, #10
 8003b34:	4619      	mov	r1, r3
 8003b36:	3401      	adds	r4, #1
 8003b38:	9305      	str	r3, [sp, #20]
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b40:	3a30      	subs	r2, #48	; 0x30
 8003b42:	2a09      	cmp	r2, #9
 8003b44:	d903      	bls.n	8003b4e <_svfiprintf_r+0x1a6>
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0c6      	beq.n	8003ad8 <_svfiprintf_r+0x130>
 8003b4a:	9105      	str	r1, [sp, #20]
 8003b4c:	e7c4      	b.n	8003ad8 <_svfiprintf_r+0x130>
 8003b4e:	4604      	mov	r4, r0
 8003b50:	2301      	movs	r3, #1
 8003b52:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b56:	e7f0      	b.n	8003b3a <_svfiprintf_r+0x192>
 8003b58:	ab03      	add	r3, sp, #12
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	462a      	mov	r2, r5
 8003b5e:	4638      	mov	r0, r7
 8003b60:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <_svfiprintf_r+0x1f8>)
 8003b62:	a904      	add	r1, sp, #16
 8003b64:	f3af 8000 	nop.w
 8003b68:	1c42      	adds	r2, r0, #1
 8003b6a:	4606      	mov	r6, r0
 8003b6c:	d1d6      	bne.n	8003b1c <_svfiprintf_r+0x174>
 8003b6e:	89ab      	ldrh	r3, [r5, #12]
 8003b70:	065b      	lsls	r3, r3, #25
 8003b72:	f53f af2d 	bmi.w	80039d0 <_svfiprintf_r+0x28>
 8003b76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b78:	b01d      	add	sp, #116	; 0x74
 8003b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b7e:	ab03      	add	r3, sp, #12
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	462a      	mov	r2, r5
 8003b84:	4638      	mov	r0, r7
 8003b86:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <_svfiprintf_r+0x1f8>)
 8003b88:	a904      	add	r1, sp, #16
 8003b8a:	f000 f91d 	bl	8003dc8 <_printf_i>
 8003b8e:	e7eb      	b.n	8003b68 <_svfiprintf_r+0x1c0>
 8003b90:	08004202 	.word	0x08004202
 8003b94:	08004208 	.word	0x08004208
 8003b98:	0800420c 	.word	0x0800420c
 8003b9c:	00000000 	.word	0x00000000
 8003ba0:	080038f5 	.word	0x080038f5

08003ba4 <sbrk_aligned>:
 8003ba4:	b570      	push	{r4, r5, r6, lr}
 8003ba6:	4e0e      	ldr	r6, [pc, #56]	; (8003be0 <sbrk_aligned+0x3c>)
 8003ba8:	460c      	mov	r4, r1
 8003baa:	6831      	ldr	r1, [r6, #0]
 8003bac:	4605      	mov	r5, r0
 8003bae:	b911      	cbnz	r1, 8003bb6 <sbrk_aligned+0x12>
 8003bb0:	f000 fa82 	bl	80040b8 <_sbrk_r>
 8003bb4:	6030      	str	r0, [r6, #0]
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	4628      	mov	r0, r5
 8003bba:	f000 fa7d 	bl	80040b8 <_sbrk_r>
 8003bbe:	1c43      	adds	r3, r0, #1
 8003bc0:	d00a      	beq.n	8003bd8 <sbrk_aligned+0x34>
 8003bc2:	1cc4      	adds	r4, r0, #3
 8003bc4:	f024 0403 	bic.w	r4, r4, #3
 8003bc8:	42a0      	cmp	r0, r4
 8003bca:	d007      	beq.n	8003bdc <sbrk_aligned+0x38>
 8003bcc:	1a21      	subs	r1, r4, r0
 8003bce:	4628      	mov	r0, r5
 8003bd0:	f000 fa72 	bl	80040b8 <_sbrk_r>
 8003bd4:	3001      	adds	r0, #1
 8003bd6:	d101      	bne.n	8003bdc <sbrk_aligned+0x38>
 8003bd8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003bdc:	4620      	mov	r0, r4
 8003bde:	bd70      	pop	{r4, r5, r6, pc}
 8003be0:	20000360 	.word	0x20000360

08003be4 <_malloc_r>:
 8003be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003be8:	1ccd      	adds	r5, r1, #3
 8003bea:	f025 0503 	bic.w	r5, r5, #3
 8003bee:	3508      	adds	r5, #8
 8003bf0:	2d0c      	cmp	r5, #12
 8003bf2:	bf38      	it	cc
 8003bf4:	250c      	movcc	r5, #12
 8003bf6:	2d00      	cmp	r5, #0
 8003bf8:	4607      	mov	r7, r0
 8003bfa:	db01      	blt.n	8003c00 <_malloc_r+0x1c>
 8003bfc:	42a9      	cmp	r1, r5
 8003bfe:	d905      	bls.n	8003c0c <_malloc_r+0x28>
 8003c00:	230c      	movs	r3, #12
 8003c02:	2600      	movs	r6, #0
 8003c04:	603b      	str	r3, [r7, #0]
 8003c06:	4630      	mov	r0, r6
 8003c08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003ce0 <_malloc_r+0xfc>
 8003c10:	f000 f9fc 	bl	800400c <__malloc_lock>
 8003c14:	f8d8 3000 	ldr.w	r3, [r8]
 8003c18:	461c      	mov	r4, r3
 8003c1a:	bb5c      	cbnz	r4, 8003c74 <_malloc_r+0x90>
 8003c1c:	4629      	mov	r1, r5
 8003c1e:	4638      	mov	r0, r7
 8003c20:	f7ff ffc0 	bl	8003ba4 <sbrk_aligned>
 8003c24:	1c43      	adds	r3, r0, #1
 8003c26:	4604      	mov	r4, r0
 8003c28:	d155      	bne.n	8003cd6 <_malloc_r+0xf2>
 8003c2a:	f8d8 4000 	ldr.w	r4, [r8]
 8003c2e:	4626      	mov	r6, r4
 8003c30:	2e00      	cmp	r6, #0
 8003c32:	d145      	bne.n	8003cc0 <_malloc_r+0xdc>
 8003c34:	2c00      	cmp	r4, #0
 8003c36:	d048      	beq.n	8003cca <_malloc_r+0xe6>
 8003c38:	6823      	ldr	r3, [r4, #0]
 8003c3a:	4631      	mov	r1, r6
 8003c3c:	4638      	mov	r0, r7
 8003c3e:	eb04 0903 	add.w	r9, r4, r3
 8003c42:	f000 fa39 	bl	80040b8 <_sbrk_r>
 8003c46:	4581      	cmp	r9, r0
 8003c48:	d13f      	bne.n	8003cca <_malloc_r+0xe6>
 8003c4a:	6821      	ldr	r1, [r4, #0]
 8003c4c:	4638      	mov	r0, r7
 8003c4e:	1a6d      	subs	r5, r5, r1
 8003c50:	4629      	mov	r1, r5
 8003c52:	f7ff ffa7 	bl	8003ba4 <sbrk_aligned>
 8003c56:	3001      	adds	r0, #1
 8003c58:	d037      	beq.n	8003cca <_malloc_r+0xe6>
 8003c5a:	6823      	ldr	r3, [r4, #0]
 8003c5c:	442b      	add	r3, r5
 8003c5e:	6023      	str	r3, [r4, #0]
 8003c60:	f8d8 3000 	ldr.w	r3, [r8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d038      	beq.n	8003cda <_malloc_r+0xf6>
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	42a2      	cmp	r2, r4
 8003c6c:	d12b      	bne.n	8003cc6 <_malloc_r+0xe2>
 8003c6e:	2200      	movs	r2, #0
 8003c70:	605a      	str	r2, [r3, #4]
 8003c72:	e00f      	b.n	8003c94 <_malloc_r+0xb0>
 8003c74:	6822      	ldr	r2, [r4, #0]
 8003c76:	1b52      	subs	r2, r2, r5
 8003c78:	d41f      	bmi.n	8003cba <_malloc_r+0xd6>
 8003c7a:	2a0b      	cmp	r2, #11
 8003c7c:	d917      	bls.n	8003cae <_malloc_r+0xca>
 8003c7e:	1961      	adds	r1, r4, r5
 8003c80:	42a3      	cmp	r3, r4
 8003c82:	6025      	str	r5, [r4, #0]
 8003c84:	bf18      	it	ne
 8003c86:	6059      	strne	r1, [r3, #4]
 8003c88:	6863      	ldr	r3, [r4, #4]
 8003c8a:	bf08      	it	eq
 8003c8c:	f8c8 1000 	streq.w	r1, [r8]
 8003c90:	5162      	str	r2, [r4, r5]
 8003c92:	604b      	str	r3, [r1, #4]
 8003c94:	4638      	mov	r0, r7
 8003c96:	f104 060b 	add.w	r6, r4, #11
 8003c9a:	f000 f9bd 	bl	8004018 <__malloc_unlock>
 8003c9e:	f026 0607 	bic.w	r6, r6, #7
 8003ca2:	1d23      	adds	r3, r4, #4
 8003ca4:	1af2      	subs	r2, r6, r3
 8003ca6:	d0ae      	beq.n	8003c06 <_malloc_r+0x22>
 8003ca8:	1b9b      	subs	r3, r3, r6
 8003caa:	50a3      	str	r3, [r4, r2]
 8003cac:	e7ab      	b.n	8003c06 <_malloc_r+0x22>
 8003cae:	42a3      	cmp	r3, r4
 8003cb0:	6862      	ldr	r2, [r4, #4]
 8003cb2:	d1dd      	bne.n	8003c70 <_malloc_r+0x8c>
 8003cb4:	f8c8 2000 	str.w	r2, [r8]
 8003cb8:	e7ec      	b.n	8003c94 <_malloc_r+0xb0>
 8003cba:	4623      	mov	r3, r4
 8003cbc:	6864      	ldr	r4, [r4, #4]
 8003cbe:	e7ac      	b.n	8003c1a <_malloc_r+0x36>
 8003cc0:	4634      	mov	r4, r6
 8003cc2:	6876      	ldr	r6, [r6, #4]
 8003cc4:	e7b4      	b.n	8003c30 <_malloc_r+0x4c>
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	e7cc      	b.n	8003c64 <_malloc_r+0x80>
 8003cca:	230c      	movs	r3, #12
 8003ccc:	4638      	mov	r0, r7
 8003cce:	603b      	str	r3, [r7, #0]
 8003cd0:	f000 f9a2 	bl	8004018 <__malloc_unlock>
 8003cd4:	e797      	b.n	8003c06 <_malloc_r+0x22>
 8003cd6:	6025      	str	r5, [r4, #0]
 8003cd8:	e7dc      	b.n	8003c94 <_malloc_r+0xb0>
 8003cda:	605b      	str	r3, [r3, #4]
 8003cdc:	deff      	udf	#255	; 0xff
 8003cde:	bf00      	nop
 8003ce0:	2000035c 	.word	0x2000035c

08003ce4 <_printf_common>:
 8003ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce8:	4616      	mov	r6, r2
 8003cea:	4699      	mov	r9, r3
 8003cec:	688a      	ldr	r2, [r1, #8]
 8003cee:	690b      	ldr	r3, [r1, #16]
 8003cf0:	4607      	mov	r7, r0
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	bfb8      	it	lt
 8003cf6:	4613      	movlt	r3, r2
 8003cf8:	6033      	str	r3, [r6, #0]
 8003cfa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cfe:	460c      	mov	r4, r1
 8003d00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d04:	b10a      	cbz	r2, 8003d0a <_printf_common+0x26>
 8003d06:	3301      	adds	r3, #1
 8003d08:	6033      	str	r3, [r6, #0]
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	0699      	lsls	r1, r3, #26
 8003d0e:	bf42      	ittt	mi
 8003d10:	6833      	ldrmi	r3, [r6, #0]
 8003d12:	3302      	addmi	r3, #2
 8003d14:	6033      	strmi	r3, [r6, #0]
 8003d16:	6825      	ldr	r5, [r4, #0]
 8003d18:	f015 0506 	ands.w	r5, r5, #6
 8003d1c:	d106      	bne.n	8003d2c <_printf_common+0x48>
 8003d1e:	f104 0a19 	add.w	sl, r4, #25
 8003d22:	68e3      	ldr	r3, [r4, #12]
 8003d24:	6832      	ldr	r2, [r6, #0]
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	42ab      	cmp	r3, r5
 8003d2a:	dc2b      	bgt.n	8003d84 <_printf_common+0xa0>
 8003d2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d30:	1e13      	subs	r3, r2, #0
 8003d32:	6822      	ldr	r2, [r4, #0]
 8003d34:	bf18      	it	ne
 8003d36:	2301      	movne	r3, #1
 8003d38:	0692      	lsls	r2, r2, #26
 8003d3a:	d430      	bmi.n	8003d9e <_printf_common+0xba>
 8003d3c:	4649      	mov	r1, r9
 8003d3e:	4638      	mov	r0, r7
 8003d40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d44:	47c0      	blx	r8
 8003d46:	3001      	adds	r0, #1
 8003d48:	d023      	beq.n	8003d92 <_printf_common+0xae>
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	6922      	ldr	r2, [r4, #16]
 8003d4e:	f003 0306 	and.w	r3, r3, #6
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	bf14      	ite	ne
 8003d56:	2500      	movne	r5, #0
 8003d58:	6833      	ldreq	r3, [r6, #0]
 8003d5a:	f04f 0600 	mov.w	r6, #0
 8003d5e:	bf08      	it	eq
 8003d60:	68e5      	ldreq	r5, [r4, #12]
 8003d62:	f104 041a 	add.w	r4, r4, #26
 8003d66:	bf08      	it	eq
 8003d68:	1aed      	subeq	r5, r5, r3
 8003d6a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003d6e:	bf08      	it	eq
 8003d70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d74:	4293      	cmp	r3, r2
 8003d76:	bfc4      	itt	gt
 8003d78:	1a9b      	subgt	r3, r3, r2
 8003d7a:	18ed      	addgt	r5, r5, r3
 8003d7c:	42b5      	cmp	r5, r6
 8003d7e:	d11a      	bne.n	8003db6 <_printf_common+0xd2>
 8003d80:	2000      	movs	r0, #0
 8003d82:	e008      	b.n	8003d96 <_printf_common+0xb2>
 8003d84:	2301      	movs	r3, #1
 8003d86:	4652      	mov	r2, sl
 8003d88:	4649      	mov	r1, r9
 8003d8a:	4638      	mov	r0, r7
 8003d8c:	47c0      	blx	r8
 8003d8e:	3001      	adds	r0, #1
 8003d90:	d103      	bne.n	8003d9a <_printf_common+0xb6>
 8003d92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d9a:	3501      	adds	r5, #1
 8003d9c:	e7c1      	b.n	8003d22 <_printf_common+0x3e>
 8003d9e:	2030      	movs	r0, #48	; 0x30
 8003da0:	18e1      	adds	r1, r4, r3
 8003da2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dac:	4422      	add	r2, r4
 8003dae:	3302      	adds	r3, #2
 8003db0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003db4:	e7c2      	b.n	8003d3c <_printf_common+0x58>
 8003db6:	2301      	movs	r3, #1
 8003db8:	4622      	mov	r2, r4
 8003dba:	4649      	mov	r1, r9
 8003dbc:	4638      	mov	r0, r7
 8003dbe:	47c0      	blx	r8
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	d0e6      	beq.n	8003d92 <_printf_common+0xae>
 8003dc4:	3601      	adds	r6, #1
 8003dc6:	e7d9      	b.n	8003d7c <_printf_common+0x98>

08003dc8 <_printf_i>:
 8003dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dcc:	7e0f      	ldrb	r7, [r1, #24]
 8003dce:	4691      	mov	r9, r2
 8003dd0:	2f78      	cmp	r7, #120	; 0x78
 8003dd2:	4680      	mov	r8, r0
 8003dd4:	460c      	mov	r4, r1
 8003dd6:	469a      	mov	sl, r3
 8003dd8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003dda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003dde:	d807      	bhi.n	8003df0 <_printf_i+0x28>
 8003de0:	2f62      	cmp	r7, #98	; 0x62
 8003de2:	d80a      	bhi.n	8003dfa <_printf_i+0x32>
 8003de4:	2f00      	cmp	r7, #0
 8003de6:	f000 80d5 	beq.w	8003f94 <_printf_i+0x1cc>
 8003dea:	2f58      	cmp	r7, #88	; 0x58
 8003dec:	f000 80c1 	beq.w	8003f72 <_printf_i+0x1aa>
 8003df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003df4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003df8:	e03a      	b.n	8003e70 <_printf_i+0xa8>
 8003dfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003dfe:	2b15      	cmp	r3, #21
 8003e00:	d8f6      	bhi.n	8003df0 <_printf_i+0x28>
 8003e02:	a101      	add	r1, pc, #4	; (adr r1, 8003e08 <_printf_i+0x40>)
 8003e04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e08:	08003e61 	.word	0x08003e61
 8003e0c:	08003e75 	.word	0x08003e75
 8003e10:	08003df1 	.word	0x08003df1
 8003e14:	08003df1 	.word	0x08003df1
 8003e18:	08003df1 	.word	0x08003df1
 8003e1c:	08003df1 	.word	0x08003df1
 8003e20:	08003e75 	.word	0x08003e75
 8003e24:	08003df1 	.word	0x08003df1
 8003e28:	08003df1 	.word	0x08003df1
 8003e2c:	08003df1 	.word	0x08003df1
 8003e30:	08003df1 	.word	0x08003df1
 8003e34:	08003f7b 	.word	0x08003f7b
 8003e38:	08003ea1 	.word	0x08003ea1
 8003e3c:	08003f35 	.word	0x08003f35
 8003e40:	08003df1 	.word	0x08003df1
 8003e44:	08003df1 	.word	0x08003df1
 8003e48:	08003f9d 	.word	0x08003f9d
 8003e4c:	08003df1 	.word	0x08003df1
 8003e50:	08003ea1 	.word	0x08003ea1
 8003e54:	08003df1 	.word	0x08003df1
 8003e58:	08003df1 	.word	0x08003df1
 8003e5c:	08003f3d 	.word	0x08003f3d
 8003e60:	682b      	ldr	r3, [r5, #0]
 8003e62:	1d1a      	adds	r2, r3, #4
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	602a      	str	r2, [r5, #0]
 8003e68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e70:	2301      	movs	r3, #1
 8003e72:	e0a0      	b.n	8003fb6 <_printf_i+0x1ee>
 8003e74:	6820      	ldr	r0, [r4, #0]
 8003e76:	682b      	ldr	r3, [r5, #0]
 8003e78:	0607      	lsls	r7, r0, #24
 8003e7a:	f103 0104 	add.w	r1, r3, #4
 8003e7e:	6029      	str	r1, [r5, #0]
 8003e80:	d501      	bpl.n	8003e86 <_printf_i+0xbe>
 8003e82:	681e      	ldr	r6, [r3, #0]
 8003e84:	e003      	b.n	8003e8e <_printf_i+0xc6>
 8003e86:	0646      	lsls	r6, r0, #25
 8003e88:	d5fb      	bpl.n	8003e82 <_printf_i+0xba>
 8003e8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003e8e:	2e00      	cmp	r6, #0
 8003e90:	da03      	bge.n	8003e9a <_printf_i+0xd2>
 8003e92:	232d      	movs	r3, #45	; 0x2d
 8003e94:	4276      	negs	r6, r6
 8003e96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e9a:	230a      	movs	r3, #10
 8003e9c:	4859      	ldr	r0, [pc, #356]	; (8004004 <_printf_i+0x23c>)
 8003e9e:	e012      	b.n	8003ec6 <_printf_i+0xfe>
 8003ea0:	682b      	ldr	r3, [r5, #0]
 8003ea2:	6820      	ldr	r0, [r4, #0]
 8003ea4:	1d19      	adds	r1, r3, #4
 8003ea6:	6029      	str	r1, [r5, #0]
 8003ea8:	0605      	lsls	r5, r0, #24
 8003eaa:	d501      	bpl.n	8003eb0 <_printf_i+0xe8>
 8003eac:	681e      	ldr	r6, [r3, #0]
 8003eae:	e002      	b.n	8003eb6 <_printf_i+0xee>
 8003eb0:	0641      	lsls	r1, r0, #25
 8003eb2:	d5fb      	bpl.n	8003eac <_printf_i+0xe4>
 8003eb4:	881e      	ldrh	r6, [r3, #0]
 8003eb6:	2f6f      	cmp	r7, #111	; 0x6f
 8003eb8:	bf0c      	ite	eq
 8003eba:	2308      	moveq	r3, #8
 8003ebc:	230a      	movne	r3, #10
 8003ebe:	4851      	ldr	r0, [pc, #324]	; (8004004 <_printf_i+0x23c>)
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ec6:	6865      	ldr	r5, [r4, #4]
 8003ec8:	2d00      	cmp	r5, #0
 8003eca:	bfa8      	it	ge
 8003ecc:	6821      	ldrge	r1, [r4, #0]
 8003ece:	60a5      	str	r5, [r4, #8]
 8003ed0:	bfa4      	itt	ge
 8003ed2:	f021 0104 	bicge.w	r1, r1, #4
 8003ed6:	6021      	strge	r1, [r4, #0]
 8003ed8:	b90e      	cbnz	r6, 8003ede <_printf_i+0x116>
 8003eda:	2d00      	cmp	r5, #0
 8003edc:	d04b      	beq.n	8003f76 <_printf_i+0x1ae>
 8003ede:	4615      	mov	r5, r2
 8003ee0:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ee4:	fb03 6711 	mls	r7, r3, r1, r6
 8003ee8:	5dc7      	ldrb	r7, [r0, r7]
 8003eea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003eee:	4637      	mov	r7, r6
 8003ef0:	42bb      	cmp	r3, r7
 8003ef2:	460e      	mov	r6, r1
 8003ef4:	d9f4      	bls.n	8003ee0 <_printf_i+0x118>
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d10b      	bne.n	8003f12 <_printf_i+0x14a>
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	07de      	lsls	r6, r3, #31
 8003efe:	d508      	bpl.n	8003f12 <_printf_i+0x14a>
 8003f00:	6923      	ldr	r3, [r4, #16]
 8003f02:	6861      	ldr	r1, [r4, #4]
 8003f04:	4299      	cmp	r1, r3
 8003f06:	bfde      	ittt	le
 8003f08:	2330      	movle	r3, #48	; 0x30
 8003f0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f0e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003f12:	1b52      	subs	r2, r2, r5
 8003f14:	6122      	str	r2, [r4, #16]
 8003f16:	464b      	mov	r3, r9
 8003f18:	4621      	mov	r1, r4
 8003f1a:	4640      	mov	r0, r8
 8003f1c:	f8cd a000 	str.w	sl, [sp]
 8003f20:	aa03      	add	r2, sp, #12
 8003f22:	f7ff fedf 	bl	8003ce4 <_printf_common>
 8003f26:	3001      	adds	r0, #1
 8003f28:	d14a      	bne.n	8003fc0 <_printf_i+0x1f8>
 8003f2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f2e:	b004      	add	sp, #16
 8003f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	f043 0320 	orr.w	r3, r3, #32
 8003f3a:	6023      	str	r3, [r4, #0]
 8003f3c:	2778      	movs	r7, #120	; 0x78
 8003f3e:	4832      	ldr	r0, [pc, #200]	; (8004008 <_printf_i+0x240>)
 8003f40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	6829      	ldr	r1, [r5, #0]
 8003f48:	061f      	lsls	r7, r3, #24
 8003f4a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f4e:	d402      	bmi.n	8003f56 <_printf_i+0x18e>
 8003f50:	065f      	lsls	r7, r3, #25
 8003f52:	bf48      	it	mi
 8003f54:	b2b6      	uxthmi	r6, r6
 8003f56:	07df      	lsls	r7, r3, #31
 8003f58:	bf48      	it	mi
 8003f5a:	f043 0320 	orrmi.w	r3, r3, #32
 8003f5e:	6029      	str	r1, [r5, #0]
 8003f60:	bf48      	it	mi
 8003f62:	6023      	strmi	r3, [r4, #0]
 8003f64:	b91e      	cbnz	r6, 8003f6e <_printf_i+0x1a6>
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	f023 0320 	bic.w	r3, r3, #32
 8003f6c:	6023      	str	r3, [r4, #0]
 8003f6e:	2310      	movs	r3, #16
 8003f70:	e7a6      	b.n	8003ec0 <_printf_i+0xf8>
 8003f72:	4824      	ldr	r0, [pc, #144]	; (8004004 <_printf_i+0x23c>)
 8003f74:	e7e4      	b.n	8003f40 <_printf_i+0x178>
 8003f76:	4615      	mov	r5, r2
 8003f78:	e7bd      	b.n	8003ef6 <_printf_i+0x12e>
 8003f7a:	682b      	ldr	r3, [r5, #0]
 8003f7c:	6826      	ldr	r6, [r4, #0]
 8003f7e:	1d18      	adds	r0, r3, #4
 8003f80:	6961      	ldr	r1, [r4, #20]
 8003f82:	6028      	str	r0, [r5, #0]
 8003f84:	0635      	lsls	r5, r6, #24
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	d501      	bpl.n	8003f8e <_printf_i+0x1c6>
 8003f8a:	6019      	str	r1, [r3, #0]
 8003f8c:	e002      	b.n	8003f94 <_printf_i+0x1cc>
 8003f8e:	0670      	lsls	r0, r6, #25
 8003f90:	d5fb      	bpl.n	8003f8a <_printf_i+0x1c2>
 8003f92:	8019      	strh	r1, [r3, #0]
 8003f94:	2300      	movs	r3, #0
 8003f96:	4615      	mov	r5, r2
 8003f98:	6123      	str	r3, [r4, #16]
 8003f9a:	e7bc      	b.n	8003f16 <_printf_i+0x14e>
 8003f9c:	682b      	ldr	r3, [r5, #0]
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	1d1a      	adds	r2, r3, #4
 8003fa2:	602a      	str	r2, [r5, #0]
 8003fa4:	681d      	ldr	r5, [r3, #0]
 8003fa6:	6862      	ldr	r2, [r4, #4]
 8003fa8:	4628      	mov	r0, r5
 8003faa:	f000 f895 	bl	80040d8 <memchr>
 8003fae:	b108      	cbz	r0, 8003fb4 <_printf_i+0x1ec>
 8003fb0:	1b40      	subs	r0, r0, r5
 8003fb2:	6060      	str	r0, [r4, #4]
 8003fb4:	6863      	ldr	r3, [r4, #4]
 8003fb6:	6123      	str	r3, [r4, #16]
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fbe:	e7aa      	b.n	8003f16 <_printf_i+0x14e>
 8003fc0:	462a      	mov	r2, r5
 8003fc2:	4649      	mov	r1, r9
 8003fc4:	4640      	mov	r0, r8
 8003fc6:	6923      	ldr	r3, [r4, #16]
 8003fc8:	47d0      	blx	sl
 8003fca:	3001      	adds	r0, #1
 8003fcc:	d0ad      	beq.n	8003f2a <_printf_i+0x162>
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	079b      	lsls	r3, r3, #30
 8003fd2:	d413      	bmi.n	8003ffc <_printf_i+0x234>
 8003fd4:	68e0      	ldr	r0, [r4, #12]
 8003fd6:	9b03      	ldr	r3, [sp, #12]
 8003fd8:	4298      	cmp	r0, r3
 8003fda:	bfb8      	it	lt
 8003fdc:	4618      	movlt	r0, r3
 8003fde:	e7a6      	b.n	8003f2e <_printf_i+0x166>
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	4632      	mov	r2, r6
 8003fe4:	4649      	mov	r1, r9
 8003fe6:	4640      	mov	r0, r8
 8003fe8:	47d0      	blx	sl
 8003fea:	3001      	adds	r0, #1
 8003fec:	d09d      	beq.n	8003f2a <_printf_i+0x162>
 8003fee:	3501      	adds	r5, #1
 8003ff0:	68e3      	ldr	r3, [r4, #12]
 8003ff2:	9903      	ldr	r1, [sp, #12]
 8003ff4:	1a5b      	subs	r3, r3, r1
 8003ff6:	42ab      	cmp	r3, r5
 8003ff8:	dcf2      	bgt.n	8003fe0 <_printf_i+0x218>
 8003ffa:	e7eb      	b.n	8003fd4 <_printf_i+0x20c>
 8003ffc:	2500      	movs	r5, #0
 8003ffe:	f104 0619 	add.w	r6, r4, #25
 8004002:	e7f5      	b.n	8003ff0 <_printf_i+0x228>
 8004004:	08004213 	.word	0x08004213
 8004008:	08004224 	.word	0x08004224

0800400c <__malloc_lock>:
 800400c:	4801      	ldr	r0, [pc, #4]	; (8004014 <__malloc_lock+0x8>)
 800400e:	f7ff bc6f 	b.w	80038f0 <__retarget_lock_acquire_recursive>
 8004012:	bf00      	nop
 8004014:	20000358 	.word	0x20000358

08004018 <__malloc_unlock>:
 8004018:	4801      	ldr	r0, [pc, #4]	; (8004020 <__malloc_unlock+0x8>)
 800401a:	f7ff bc6a 	b.w	80038f2 <__retarget_lock_release_recursive>
 800401e:	bf00      	nop
 8004020:	20000358 	.word	0x20000358

08004024 <_realloc_r>:
 8004024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004028:	4680      	mov	r8, r0
 800402a:	4614      	mov	r4, r2
 800402c:	460e      	mov	r6, r1
 800402e:	b921      	cbnz	r1, 800403a <_realloc_r+0x16>
 8004030:	4611      	mov	r1, r2
 8004032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004036:	f7ff bdd5 	b.w	8003be4 <_malloc_r>
 800403a:	b92a      	cbnz	r2, 8004048 <_realloc_r+0x24>
 800403c:	f000 f868 	bl	8004110 <_free_r>
 8004040:	4625      	mov	r5, r4
 8004042:	4628      	mov	r0, r5
 8004044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004048:	f000 f8aa 	bl	80041a0 <_malloc_usable_size_r>
 800404c:	4284      	cmp	r4, r0
 800404e:	4607      	mov	r7, r0
 8004050:	d802      	bhi.n	8004058 <_realloc_r+0x34>
 8004052:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004056:	d812      	bhi.n	800407e <_realloc_r+0x5a>
 8004058:	4621      	mov	r1, r4
 800405a:	4640      	mov	r0, r8
 800405c:	f7ff fdc2 	bl	8003be4 <_malloc_r>
 8004060:	4605      	mov	r5, r0
 8004062:	2800      	cmp	r0, #0
 8004064:	d0ed      	beq.n	8004042 <_realloc_r+0x1e>
 8004066:	42bc      	cmp	r4, r7
 8004068:	4622      	mov	r2, r4
 800406a:	4631      	mov	r1, r6
 800406c:	bf28      	it	cs
 800406e:	463a      	movcs	r2, r7
 8004070:	f000 f840 	bl	80040f4 <memcpy>
 8004074:	4631      	mov	r1, r6
 8004076:	4640      	mov	r0, r8
 8004078:	f000 f84a 	bl	8004110 <_free_r>
 800407c:	e7e1      	b.n	8004042 <_realloc_r+0x1e>
 800407e:	4635      	mov	r5, r6
 8004080:	e7df      	b.n	8004042 <_realloc_r+0x1e>

08004082 <memmove>:
 8004082:	4288      	cmp	r0, r1
 8004084:	b510      	push	{r4, lr}
 8004086:	eb01 0402 	add.w	r4, r1, r2
 800408a:	d902      	bls.n	8004092 <memmove+0x10>
 800408c:	4284      	cmp	r4, r0
 800408e:	4623      	mov	r3, r4
 8004090:	d807      	bhi.n	80040a2 <memmove+0x20>
 8004092:	1e43      	subs	r3, r0, #1
 8004094:	42a1      	cmp	r1, r4
 8004096:	d008      	beq.n	80040aa <memmove+0x28>
 8004098:	f811 2b01 	ldrb.w	r2, [r1], #1
 800409c:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040a0:	e7f8      	b.n	8004094 <memmove+0x12>
 80040a2:	4601      	mov	r1, r0
 80040a4:	4402      	add	r2, r0
 80040a6:	428a      	cmp	r2, r1
 80040a8:	d100      	bne.n	80040ac <memmove+0x2a>
 80040aa:	bd10      	pop	{r4, pc}
 80040ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040b0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040b4:	e7f7      	b.n	80040a6 <memmove+0x24>
	...

080040b8 <_sbrk_r>:
 80040b8:	b538      	push	{r3, r4, r5, lr}
 80040ba:	2300      	movs	r3, #0
 80040bc:	4d05      	ldr	r5, [pc, #20]	; (80040d4 <_sbrk_r+0x1c>)
 80040be:	4604      	mov	r4, r0
 80040c0:	4608      	mov	r0, r1
 80040c2:	602b      	str	r3, [r5, #0]
 80040c4:	f7fc fe58 	bl	8000d78 <_sbrk>
 80040c8:	1c43      	adds	r3, r0, #1
 80040ca:	d102      	bne.n	80040d2 <_sbrk_r+0x1a>
 80040cc:	682b      	ldr	r3, [r5, #0]
 80040ce:	b103      	cbz	r3, 80040d2 <_sbrk_r+0x1a>
 80040d0:	6023      	str	r3, [r4, #0]
 80040d2:	bd38      	pop	{r3, r4, r5, pc}
 80040d4:	20000364 	.word	0x20000364

080040d8 <memchr>:
 80040d8:	4603      	mov	r3, r0
 80040da:	b510      	push	{r4, lr}
 80040dc:	b2c9      	uxtb	r1, r1
 80040de:	4402      	add	r2, r0
 80040e0:	4293      	cmp	r3, r2
 80040e2:	4618      	mov	r0, r3
 80040e4:	d101      	bne.n	80040ea <memchr+0x12>
 80040e6:	2000      	movs	r0, #0
 80040e8:	e003      	b.n	80040f2 <memchr+0x1a>
 80040ea:	7804      	ldrb	r4, [r0, #0]
 80040ec:	3301      	adds	r3, #1
 80040ee:	428c      	cmp	r4, r1
 80040f0:	d1f6      	bne.n	80040e0 <memchr+0x8>
 80040f2:	bd10      	pop	{r4, pc}

080040f4 <memcpy>:
 80040f4:	440a      	add	r2, r1
 80040f6:	4291      	cmp	r1, r2
 80040f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80040fc:	d100      	bne.n	8004100 <memcpy+0xc>
 80040fe:	4770      	bx	lr
 8004100:	b510      	push	{r4, lr}
 8004102:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004106:	4291      	cmp	r1, r2
 8004108:	f803 4f01 	strb.w	r4, [r3, #1]!
 800410c:	d1f9      	bne.n	8004102 <memcpy+0xe>
 800410e:	bd10      	pop	{r4, pc}

08004110 <_free_r>:
 8004110:	b538      	push	{r3, r4, r5, lr}
 8004112:	4605      	mov	r5, r0
 8004114:	2900      	cmp	r1, #0
 8004116:	d040      	beq.n	800419a <_free_r+0x8a>
 8004118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800411c:	1f0c      	subs	r4, r1, #4
 800411e:	2b00      	cmp	r3, #0
 8004120:	bfb8      	it	lt
 8004122:	18e4      	addlt	r4, r4, r3
 8004124:	f7ff ff72 	bl	800400c <__malloc_lock>
 8004128:	4a1c      	ldr	r2, [pc, #112]	; (800419c <_free_r+0x8c>)
 800412a:	6813      	ldr	r3, [r2, #0]
 800412c:	b933      	cbnz	r3, 800413c <_free_r+0x2c>
 800412e:	6063      	str	r3, [r4, #4]
 8004130:	6014      	str	r4, [r2, #0]
 8004132:	4628      	mov	r0, r5
 8004134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004138:	f7ff bf6e 	b.w	8004018 <__malloc_unlock>
 800413c:	42a3      	cmp	r3, r4
 800413e:	d908      	bls.n	8004152 <_free_r+0x42>
 8004140:	6820      	ldr	r0, [r4, #0]
 8004142:	1821      	adds	r1, r4, r0
 8004144:	428b      	cmp	r3, r1
 8004146:	bf01      	itttt	eq
 8004148:	6819      	ldreq	r1, [r3, #0]
 800414a:	685b      	ldreq	r3, [r3, #4]
 800414c:	1809      	addeq	r1, r1, r0
 800414e:	6021      	streq	r1, [r4, #0]
 8004150:	e7ed      	b.n	800412e <_free_r+0x1e>
 8004152:	461a      	mov	r2, r3
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	b10b      	cbz	r3, 800415c <_free_r+0x4c>
 8004158:	42a3      	cmp	r3, r4
 800415a:	d9fa      	bls.n	8004152 <_free_r+0x42>
 800415c:	6811      	ldr	r1, [r2, #0]
 800415e:	1850      	adds	r0, r2, r1
 8004160:	42a0      	cmp	r0, r4
 8004162:	d10b      	bne.n	800417c <_free_r+0x6c>
 8004164:	6820      	ldr	r0, [r4, #0]
 8004166:	4401      	add	r1, r0
 8004168:	1850      	adds	r0, r2, r1
 800416a:	4283      	cmp	r3, r0
 800416c:	6011      	str	r1, [r2, #0]
 800416e:	d1e0      	bne.n	8004132 <_free_r+0x22>
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	4408      	add	r0, r1
 8004176:	6010      	str	r0, [r2, #0]
 8004178:	6053      	str	r3, [r2, #4]
 800417a:	e7da      	b.n	8004132 <_free_r+0x22>
 800417c:	d902      	bls.n	8004184 <_free_r+0x74>
 800417e:	230c      	movs	r3, #12
 8004180:	602b      	str	r3, [r5, #0]
 8004182:	e7d6      	b.n	8004132 <_free_r+0x22>
 8004184:	6820      	ldr	r0, [r4, #0]
 8004186:	1821      	adds	r1, r4, r0
 8004188:	428b      	cmp	r3, r1
 800418a:	bf01      	itttt	eq
 800418c:	6819      	ldreq	r1, [r3, #0]
 800418e:	685b      	ldreq	r3, [r3, #4]
 8004190:	1809      	addeq	r1, r1, r0
 8004192:	6021      	streq	r1, [r4, #0]
 8004194:	6063      	str	r3, [r4, #4]
 8004196:	6054      	str	r4, [r2, #4]
 8004198:	e7cb      	b.n	8004132 <_free_r+0x22>
 800419a:	bd38      	pop	{r3, r4, r5, pc}
 800419c:	2000035c 	.word	0x2000035c

080041a0 <_malloc_usable_size_r>:
 80041a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041a4:	1f18      	subs	r0, r3, #4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	bfbc      	itt	lt
 80041aa:	580b      	ldrlt	r3, [r1, r0]
 80041ac:	18c0      	addlt	r0, r0, r3
 80041ae:	4770      	bx	lr

080041b0 <_init>:
 80041b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b2:	bf00      	nop
 80041b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041b6:	bc08      	pop	{r3}
 80041b8:	469e      	mov	lr, r3
 80041ba:	4770      	bx	lr

080041bc <_fini>:
 80041bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041be:	bf00      	nop
 80041c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041c2:	bc08      	pop	{r3}
 80041c4:	469e      	mov	lr, r3
 80041c6:	4770      	bx	lr
